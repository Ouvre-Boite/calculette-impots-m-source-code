#*************************************************************************************************************************
#
#Copyright or © or Copr.[DGFIP][2017]
#
#Ce logiciel a été initialement développé par la Direction Générale des 
#Finances Publiques pour permettre le calcul de l'impôt sur le revenu 2013 
#au titre des revenus percus en 2012. La présente version a permis la 
#génération du moteur de calcul des chaînes de taxation des rôles d'impôt 
#sur le revenu de ce millésime.
#
#Ce logiciel est régi par la licence CeCILL 2.1 soumise au droit français 
#et respectant les principes de diffusion des logiciels libres. Vous pouvez 
#utiliser, modifier et/ou redistribuer ce programme sous les conditions de 
#la licence CeCILL 2.1 telle que diffusée par le CEA, le CNRS et l'INRIA  sur 
#le site "http://www.cecill.info".
#
#Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris 
#connaissance de la licence CeCILL 2.1 et que vous en avez accepté les termes.
#
#**************************************************************************************************************************
 #
  ####   #    #    ##    #####         #####      #
 #    #  #    #   #  #   #    #        #          #
 #       ######  #    #  #    #        #          #
 #       #    #  ######  #####         #####      #
 #    #  #    #  #    #  #                 #      #
  ####   #    #  #    #  #     #####   #####      #
 #
 #
 #
 #
 #
 #
 #           CALCUL DES DROITS SIMPLES RESULTANT DU TAUX PROGRESSIF
 #
 #
 #
 #
 #
 #
regle 5010:
application : bareme , iliad , batch  ;
IMT11 = max(ID11-ADO1 , IMI)*(1-INDTXMOY)
         + IMO * INDTXMOY ;
IMT12 = max(ID11 , IMI)*(1-INDTXMOY)
         + IMO * INDTXMOY ;
IMTANT11 = max(IDANT11-ADO1 , IMI)*(1-INDTXMOY)
         + IMO * INDTXMOY ;
IMTANT12 = max(IDANT11 , IMI)*(1-INDTXMOY)
         + IMO * INDTXMOY ;
IPHQ = arr(IMT11 * (IMPFHQ1 / ID11)) ;
IPHQ2 = arr(IMT12 * (IMPFHQ1 / ID11)) ;
IPHQANT2 = arr(IMTANT12 * (IMPFHQANT1 / IDANT11)) ;
IPQT = IMT11 - IPHQ;
IPQT2 = IMT12 - IPHQ2;
regle 502:
application : bareme , iliad , batch  ;
pour z = 1,2:
ID1z =  arr( IPQz * arr(RIz+REVQUO) / arr(RB0z+TONEQUO) );
IDANT11 =  arr( IPQANT1 * arr(RI1+REVQUO) / arr(RB01+TONEQUO) );
ID14 = IN04;
ID16 = IN06;
IMPFHQ1 = (1-positif(IPTEFN)) * EXO1 * arr(ID11 * IPQ01 / IPQ1);
IMPFHQANT1 = (1-positif(IPTEFN)) * EXO1 
             * arr(IDANT11 * IPQANT01 / IPQANT1);
regle 5021:
application : bareme , iliad , batch  ;
pour z=1,2:
IPQz = IPQ0z*EXO1 + IPQ100z;
IPQANT1 = IPQANT01*EXO1 + IPQANT1001;
IPQ5 = IPQ05 + IPQ1005;
regle 50201:
application : iliad , batch  ;
pour z = 1,2:
IDOM3z = (positif(IND_TDR) * IDOM14)
         +
     ((1-positif(IND_TDR)) * ((V_CR2 * IDOM1z) + ((1-V_CR2) * (IPQz - ADO3z))));
regle 50211:
application : iliad , batch  ;
SEUILEXO = SEUIL_EXO1 + (SEUIL_EXO2 - SEUIL_EXO1)
           * positif_ou_nul( max(AGV,AGC) - LIM_AGE_EXO );
EXO1 =    (1-min(abs(IPTEFN) + IPTEFP+INDTEFF , 1)) * 
                                  positif(R1649+PREREV + RG + TOTALQUO +(AB
                                          *(1-present(IPVLOC)))-SEUILEXO)   
            + 
            (min(abs(IPTEFN) + IPTEFP +INDTEFF, 1)) 
        ; 
regle 502110:
application :  bareme  ;
EXO1 =   present(V_9ZZ);

regle 5022:
application : iliad , batch  ;
IMI = arr (BMI * TX_MIN_MET / 100 
              + arr(PRODOM + PROGUY) * TX_MIN_DOM / 100) 
          * V_CR2;
IMO = arr (BMI * TMOY / 100
              + arr(PRODOM + PROGUY) * TX_MIN_DOM / 100) 
          * V_CR2;
RASAR = arr (BRAS * TX_RASAR / 100) ;
regle 50221:
application : bareme , iliad , batch  ;
BMI = arr( RI1 + REVQUO - PRODOM - PROGUY ) ;
regle 50222:
application : iliad , batch  ;
TMOY = inf(IPQ5/(max(0,RB05 + TONEQUOM)) * 10000) / 100 * V_CR2;
regle 503:
application : bareme , iliad , batch  ;
pour z=1,2,5,7:
IQUOTOTz = IN5z - IN0z;
IQUOTOTANT1 = INANT51 - INANT01;
regle 50299:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQ1z = positif(somme(i=2..4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTz * RPQ1 / TONEQUO1)
         + (1 - positif(somme(i=2..4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * IQUOTOTz ;
ZIPQANT11 = positif(somme(i=2..4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTANT1 * RPQ1 / TONEQUO1)
         + (1 - positif(somme(i=2..4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * IQUOTOTANT1 ;
ZIPQ15 = positif(somme(i=2..4:GLiM)+GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
          * arr(IQUOTOT5 * RPQ1M / TONEQUOM1)
         + (1 - positif(somme(i=2..4:GLiM)+GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * IQUOTOT7 ;
pour z=1,2:
ZIPQ2z = positif(somme(i=3,4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTz * RPQ2 / TONEQUO1)
         + (1 - positif(somme(i=3,4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * (IQUOTOTz-ZIPQ1z) ;
ZIPQANT21 = positif(somme(i=3,4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTANT1 * RPQ2 / TONEQUO1)
         + (1 - positif(somme(i=3,4:GLi)+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * (IQUOTOTANT1 -ZIPQANT11);
ZIPQ25 = positif(somme(i=3,4:GLiM)+GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
          * arr(IQUOTOT5 * RPQ2M / TONEQUOM1)
         + (1 - positif(somme(i=3,4:GLiM)+GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * (IQUOTOT7 -ZIPQ15);
pour z=1,2:
ZIPQ3z = positif(GL4+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTz * RPQ3 / TONEQUO1)
         + (1 - positif(GL4+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * (IQUOTOTz -somme(x=1,2:ZIPQxz));
ZIPQANT31 = positif(GL4+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTANT1 * RPQ3 / TONEQUO1)
         + (1 - positif(GL4+GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * (IQUOTOTANT1 -somme(x=1,2:ZIPQANTx1));
ZIPQ35 = positif(GL4M+GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
          * arr(IQUOTOT5 * RPQ3M / TONEQUOM1)
         + (1 - positif(GL4M+GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * (IQUOTOT7 -somme(x=1,2:ZIPQx5));
pour z=1,2:
ZIPQ4z = positif(GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTz * RPQ4 / TONEQUO1)
         + (1 - positif(GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * (IQUOTOTz -somme(x=1..3:ZIPQxz));
ZIPQANT41 = positif(GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
          * arr(IQUOTOTANT1 * RPQ4 / TONEQUO1)
         + (1 - positif(GLFTOT+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * (IQUOTOTANT1 -somme(x=1..3:ZIPQANTx1));
ZIPQ45 = positif(GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
          * arr(IQUOTOT5 * RPQ4M / TONEQUOM1)
         + (1 - positif(GLFTOTM+GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * (IQUOTOT7 -somme(x=1..3:ZIPQx5));
regle 50341:
application : bareme , iliad , batch  ;
ZIPQ1TOT= somme(i=1..4 : ZIPQi1);
ZIPQ2TOT= somme(i=1..4 : ZIPQi2);
ZIPQ5TOT= somme(i=1..4 : ZIPQi5);
ZIPQANT1TOT= somme(i=1..4 : ZIPQANTi1);
regle 5034:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQFVz = positif(somme(i=C,1..4:GLFi)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTz*RPQFV/TONEQUO1)
         + (1 - positif(somme(i=C,1..4:GLFi)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT))
		* (IQUOTOTz-ZIPQzTOT);
ZIPQFANTV1 = positif(somme(i=C,1..4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTANT1*RPQFV/TONEQUO1)
         + (1 - positif(somme(i=C,1..4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) 
		* (IQUOTOTANT1-ZIPQANT1TOT) ;
ZIPQFV5 = positif(somme(i=C,1..4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
		* arr(IQUOTOT5*RPQFVM/TONEQUOM1)
         + (1 - positif(somme(i=C,1..4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) 
		* (IQUOTOT5-ZIPQ5TOT);
pour z=1,2:
ZIPQFCz = positif(somme(i=1..4:GLFi)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTz*RPQFC/TONEQUO1)
         + (1 - positif(somme(i=1..4:GLFi)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT))
		* (IQUOTOTz-ZIPQzTOT-ZIPQFVz);
ZIPQFANTC1 = positif(somme(i=1..4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTANT1*RPQFC/TONEQUO1)
         + (1 - positif(somme(i=1..4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) 
		* (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANTV1) ;
ZIPQFC5 = positif(somme(i=1..4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
		* arr(IQUOTOT5*RPQFCM/TONEQUOM1)
         + (1 - positif(somme(i=C,1..4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) 
		* (IQUOTOT5-ZIPQ5TOT-ZIPQFV5);
pour z=1,2:
ZIPQF1z = positif(somme(i=2,3,4:GLFi)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTz*RPQF1/TONEQUO1)
         + (1 - positif(somme(i=2..4:GLFiM)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT))
		* (IQUOTOTz-ZIPQzTOT-somme(x=V,C:ZIPQFxz));
ZIPQFANT11 = positif(somme(i=2..4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTANT1*RPQF1/TONEQUO1)
         + (1 - positif(somme(i=2..4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) 
		* (IQUOTOTANT1-ZIPQANT1TOT-somme(x=V,C:ZIPQFANTx1)) ;
ZIPQF15 = positif(somme(i=2,3,4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
		* arr(IQUOTOT5*RPQF1M/TONEQUOM1)
         + (1 - positif(somme(i=2..4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) 
		* (IQUOTOT5-ZIPQ5TOT-somme(x=V,C:ZIPQFx5));
pour z=1,2:
ZIPQF2z = positif(somme(i=3,4:GLFi)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTz*RPQF2/TONEQUO1)
         + (1 - positif(somme(i=3,4:GLFi)+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT))
		* (IQUOTOTz-ZIPQzTOT-somme(x=V,C,1:ZIPQFxz));
ZIPQFANT21 = positif(somme(i=3,4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTANT1*RPQF2/TONEQUO1)
         + (1 - positif(somme(i=3,4 : GLFi) +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) 
		* (IQUOTOTANT1-ZIPQANT1TOT-somme(x=V,C,1:ZIPQFANTx1)) ;
ZIPQF25 = positif(somme(i=3,4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
		* arr(IQUOTOT5*RPQF2M/TONEQUOM1)
         + (1 - positif(somme(i=3,4 : GLFiM) +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) 
		* (IQUOTOT5-ZIPQ5TOT-somme(x=V,C,1:ZIPQFx5));
pour z=1,2:
ZIPQF3z = positif(GLF4+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTz*RPQF3/TONEQUO1)
         + (1 - positif(GLF4+GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT))
		* (IQUOTOTz-ZIPQzTOT-somme(x=V,C,1,2:ZIPQFxz));
ZIPQFANT31 = positif(GLF4 +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTANT1*RPQF3/TONEQUO1)
         + (1 - positif(GLF4 +GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) 
		* (IQUOTOTANT1-ZIPQANT1TOT-somme(x=V,C,1,2:ZIPQFANTx1)) ;
ZIPQF35 = positif(GLF4M +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
		* arr(IQUOTOT5*RPQF3M/TONEQUOM1)
         + (1 - positif(GLF4M +GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) 
		* (IQUOTOT5-ZIPQ5TOT-somme(x=V,C,1,2:ZIPQFx5));
pour z=1,2:
ZIPQF4z = positif(GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTz*RPQF4/TONEQUO1)
         + (1 - positif(GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT))
		* (IQUOTOTz-ZIPQzTOT-somme(x=V,C,1..3:ZIPQFxz));
ZIPQFANT41 = positif(GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) 
		* arr(IQUOTOTANT1*RPQF4/TONEQUO1)
         + (1 - positif(GLPALIMTOT+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) 
		* (IQUOTOTANT1-ZIPQANT1TOT-somme(x=V,C,1..3:ZIPQFANTx1)) ;
ZIPQF45 = positif(GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) 
		* arr(IQUOTOT5*RPQF4M/TONEQUOM1)
         + (1 - positif(GLPALIMTOTM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) 
		* (IQUOTOT5-ZIPQ5TOT-somme(x=V,C,1..3:ZIPQFx5));
ZIPQF1TOT= somme(i=V,C,1..4 : ZIPQFi1);
ZIPQF2TOT= somme(i=V,C,1..4 : ZIPQFi2);
ZIPQF5TOT= somme(i=V,C,1..4 : ZIPQFi5);
ZIPQFANT1TOT= somme(i=V,C,1..4 : ZIPQFANTi1);
regle 50396:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQPALIMVz = positif(somme(i=C,1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) * arr(IQUOTOTz*RPQPALIMV/TONEQUO1)
         + (1 - positif(somme(i=C,1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT);
ZIPQPALIMANTV1 = positif(somme(i=C,1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT + somme(i= V,C : GLTSAFNi)) * arr(IQUOTOTANT1*RPQPALIMV/TONEQUO1)
         + (1 - positif(somme(i=C,1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT
        );
ZIPQPALIMV5 = positif(somme(i=C,1..4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPALIMVM/TONEQUOM1)
         + (1 - positif(somme(i=C,1..4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT );
pour z=1,2:
ZIPQPALIMCz = positif(somme(i=1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) * arr(IQUOTOTz*RPQPALIMC/TONEQUO1)
         + (1 - positif(somme(i=1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMVz);
ZIPQPALIMANTC1 = positif(somme(i=1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT + somme(i= V,C : GLTSAFNi)) * arr(IQUOTOTANT1*RPQPALIMC/TONEQUO1)
         + (1 - positif(somme(i=1..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANTV1
        );
ZIPQPALIMC5 = positif(somme(i=1..4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPALIMCM/TONEQUOM1)
         + (1 - positif(somme(i=1..4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIMV5 );
pour z=1,2:
ZIPQPALIM1z = positif(somme(i=2..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) * arr(IQUOTOTz*RPQPALIM1/TONEQUO1)
         + (1 - positif(somme(i=2..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-somme(i=V,C:ZIPQPALIMiz));
ZIPQPALIMANT11 = positif(somme(i=2..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT + somme(i= V,C : GLTSAFNi)) * arr(IQUOTOTANT1*RPQPALIM1/TONEQUO1)
         + (1 - positif(somme(i=2..4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-somme(i=V,C:ZIPQPALIMANTi1)
        );
ZIPQPALIM15 = positif(somme(i=2..4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPALIM1M/TONEQUOM1)
         + (1 - positif(somme(i=2..4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-somme(i=V,C:ZIPQPALIMi5));
pour z=1,2:
ZIPQPALIM2z = positif(somme(i=3,4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) * arr(IQUOTOTz*RPQPALIM2/TONEQUO1)
         + (1 - positif(somme(i=3,4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-somme(i=V,C,1:ZIPQPALIMiz));
ZIPQPALIMANT21 = positif(somme(i=3,4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT + somme(i= V,C : GLTSAFNi)) * arr(IQUOTOTANT1*RPQPALIM2/TONEQUO1)
         + (1 - positif(somme(i=3,4:GLPALIMi)+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-somme(i=V,C,1:ZIPQPALIMANTi1)
        );
ZIPQPALIM25 = positif(somme(i=3,4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPALIM2M/TONEQUOM1)
         + (1 - positif(somme(i=3,4:GLPALIMiM)+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-somme(i=V,C,1:ZIPQPALIMi5));
pour z=1,2:
ZIPQPALIM3z = positif(GLPALIM4+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) * arr(IQUOTOTz*RPQPALIM3/TONEQUO1)
         + (1 - positif(GLPALIM4+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-somme(i=V,C,1..2:ZIPQPALIMiz));
ZIPQPALIMANT31 = positif(GLPALIM4+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT + somme(i= V,C : GLTSAFNi)) * arr(IQUOTOTANT1*RPQPALIM3/TONEQUO1)
         + (1 - positif(GLPALIM4+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-somme(i=V,C,1..2:ZIPQPALIMANTi1)
        );
ZIPQPALIM35 = positif(GLPALIM4M+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPALIM3M/TONEQUOM1)
         + (1 - positif(GLPALIM4M+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-somme(i=V,C,1..2:ZIPQPALIMi5));
pour z=1,2:
ZIPQPALIM4z = positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT) * arr(IQUOTOTz*RPQPALIM4/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-somme(i=V,C,1..3:ZIPQPALIMiz));
ZIPQPALIMANT41 = positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT + somme(i= V,C : GLTSAFNi)) * arr(IQUOTOTANT1*RPQPALIM4/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRCMTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-somme(i=V,C,1..3:ZIPQPALIMANTi1)
        );
ZIPQPALIM45 = positif(GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPALIM4M/TONEQUOM1)
         + (1 - positif(GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-somme(i=V,C,1..3:ZIPQPALIMi5));
ZIPQPALIM1TOT= somme(i=V,C,1..4 : ZIPQPALIMi1);
ZIPQPALIM2TOT= somme(i=V,C,1..4 : ZIPQPALIMi2);
ZIPQPALIM5TOT= somme(i=V,C,1..4 : ZIPQPALIMi5);
ZIPQPALIMANT1TOT= somme(i=V,C,1..4 : ZIPQPALIMANTi1);
regle 50397:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRCMDCz = positif(GLRCMFU+GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQRCMDC/TONEQUO1)
         + (1 - positif(GLRCMFU+GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT);
ZIPQRCMDCANT1 = positif(GLRCMFU+GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQRCMDC/TONEQUO1)
         + (1 - positif(GLRCMFU+GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT
        );
ZIPQRCMDC5 = positif(GLRCMFUM+GLRCMCHM+GLRCMTSM+GLRCMGOM+GLRCMTRM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQRCMDCM/TONEQUOM1)
         + (1 - positif(GLRCMFUM+GLRCMCHM+GLRCMTSM+GLRCMGOM+GLRCMTRM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRCMTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT);
regle 50398:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRCMFUz = positif(GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQRCMFU/TONEQUO1)
         + (1 - positif(GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMDCz);
ZIPQRCMFUANT1 = positif(GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQRCMFU/TONEQUO1)
         + (1 - positif(GLRCMCH+GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMDCANT1
        );
ZIPQRCMFU5 = positif(GLRCMCHM+GLRCMTSM+GLRCMGOM+GLRCMTRM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQRCMFUM/TONEQUOM1)
         + (1 - positif(GLRCMCHM+GLRCMTSM+GLRCMGOM+GLRCMTRM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCMDC5);
regle 50401:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRCMCHz = positif(GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQRCMCH/TONEQUO1)
         + (1 - positif(GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMDCz-ZIPQRCMFUz);
ZIPQRCMCHANT1 = positif(GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQRCMCH/TONEQUO1)
         + (1 - positif(GLRCMTS+GLRCMGO+GLRCMTR+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMDCANT1-ZIPQRCMFUANT1
        );
ZIPQRCMCH5 = positif(GLRCMTSM+GLRCMGOM+GLRCMTRM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQRCMCHM/TONEQUOM1)
         + (1 - positif(GLRCMTSM+GLRCMGOM+GLRCMTRM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCMDC5-ZIPQRCMFU5);
regle 50402:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRCMTRz = positif(GLRCMGO+GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQRCMTR/TONEQUO1)
         + (1 - positif(GLRCMGO+GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMDCz-ZIPQRCMFUz-ZIPQRCMCHz);
ZIPQRCMTRANT1 = positif(GLRCMGO+GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQRCMTR/TONEQUO1)
         + (1 - positif(GLRCMGO+GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMDCANT1-ZIPQRCMFUANT1-ZIPQRCMCHANT1
        );
ZIPQRCMTR5 = positif(GLRCMGOM+GLRCMTSM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQRCMTRM/TONEQUOM1)
         + (1 - positif(GLRCMGOM+GLRCMTSM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCMDC5-ZIPQRCMFU5-ZIPQRCMCH5);
regle 50403:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRCMGOz = positif(GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQRCMGO/TONEQUO1)
         + (1 - positif(GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMDCz-ZIPQRCMFUz-ZIPQRCMCHz-ZIPQRCMTRz);
ZIPQRCMGOANT1 = positif(GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQRCMGO/TONEQUO1)
         + (1 - positif(GLRCMTS+GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMDCANT1-ZIPQRCMFUANT1-ZIPQRCMCHANT1-ZIPQRCMTRANT1
        );
ZIPQRCMGO5 = positif(GLRCMTSM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQRCMGOM/TONEQUOM1)
         + (1 - positif(GLRCMTSM+GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCMDC5-ZIPQRCMFU5-ZIPQRCMCH5-ZIPQRCMTR5);
regle 50404:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRCMTSz = positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQRCMTS/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMDCz-ZIPQRCMFUz-ZIPQRCMCHz-ZIPQRCMTRz-ZIPQRCMGOz);
ZIPQRCMTSANT1 = positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQRCMTS/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLPRRTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMDCANT1-ZIPQRCMFUANT1-ZIPQRCMCHANT1-ZIPQRCMTRANT1-ZIPQRCMGOANT1
        );
ZIPQRCMTS5 = positif(GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQRCMTSM/TONEQUOM1)
         + (1 - positif(GLTSTOTM+GLTSREMPTOTM+GLPRRTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCMDC5-ZIPQRCMFU5-ZIPQRCMCH5-ZIPQRCMTR5-ZIPQRCMGO5);
ZIPQRCM1TOT= ZIPQRCMDC1 + ZIPQRCMFU1 + ZIPQRCMCH1 + ZIPQRCMTS1 + ZIPQRCMGO1 + ZIPQRCMTR1;
ZIPQRCM2TOT= ZIPQRCMDC2 + ZIPQRCMFU2 + ZIPQRCMCH2 + ZIPQRCMTS2 + ZIPQRCMGO2 + ZIPQRCMTR2;
ZIPQRCM5TOT= ZIPQRCMDC5 + ZIPQRCMFU5 + ZIPQRCMCH5 + ZIPQRCMTS5 + ZIPQRCMGO5 + ZIPQRCMTR5;
ZIPQRCMANT1TOT= ZIPQRCMDCANT1 + ZIPQRCMFUANT1 + ZIPQRCMCHANT1 + ZIPQRCMTSANT1 + ZIPQRCMGOANT1 + ZIPQRCMTRANT1;
regle 50410:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQPRRVz = positif(somme(i=C,1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQPRRV/TONEQUO1)
         + (1 - positif(somme(i=C,1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT);
ZIPQPRRANTV1 = positif(somme(i=C,1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQPRRV/TONEQUO1)
         + (1 - positif(somme(i=C,1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT
        );
ZIPQPRRV5 = positif(somme(i=C,1..4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPRRVM/TONEQUOM1)
         + (1 - positif(somme(i=C,1..4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT);
pour z=1,2:
ZIPQPRRCz = positif(somme(i=1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQPRRC/TONEQUO1)
         + (1 - positif(somme(i=1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRVz);
ZIPQPRRANTC1 = positif(somme(i=1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQPRRC/TONEQUO1)
         + (1 - positif(somme(i=1..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANTV1
        );
ZIPQPRRC5 = positif(somme(i=1..4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPRRCM/TONEQUOM1)
         + (1 - positif(somme(i=1..4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRRV5);
pour z=1,2:
ZIPQPRR1z = positif(somme(i=2..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQPRR1/TONEQUO1)
         + (1 - positif(somme(i=2..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRVz-ZIPQPRRCz);
ZIPQPRRANT11 = positif(somme(i=2..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQPRR1/TONEQUO1)
         + (1 - positif(somme(i=2..4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANTV1-ZIPQPRRANTC1
        );
ZIPQPRR15 = positif(somme(i=2..4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPRR1M/TONEQUOM1)
         + (1 - positif(somme(i=2..4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRRV5-ZIPQPRRC5);
pour z=1,2:
ZIPQPRR2z = positif(somme(i=3,4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQPRR2/TONEQUO1)
         + (1 - positif(somme(i=3,4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRVz-ZIPQPRRCz-ZIPQPRR1z);
ZIPQPRRANT21 = positif(somme(i=3,4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQPRR2/TONEQUO1)
         + (1 - positif(somme(i=3,4 : GLPRRi)+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANTV1-ZIPQPRRANTC1-ZIPQPRRANT11
        );
ZIPQPRR25 = positif(somme(i=3,4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPRR2M/TONEQUOM1)
         + (1 - positif(somme(i=3,4 : GLPRRiM)+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRRV5-ZIPQPRRC5-ZIPQPRR15);
pour z=1,2:
ZIPQPRR3z = positif(GLPRR4+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQPRR3/TONEQUO1)
         + (1 - positif(GLPRR4+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRVz-ZIPQPRRCz-ZIPQPRR1z-ZIPQPRR2z);
ZIPQPRRANT31 = positif(GLPRR4+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQPRR3/TONEQUO1)
         + (1 - positif(GLPRR4+GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANTV1-ZIPQPRRANTC1-ZIPQPRRANT11-ZIPQPRRANT21
        );
ZIPQPRR35 = positif(GLPRR4M+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPRR3M/TONEQUOM1)
         + (1 - positif(GLPRR4M+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRRV5-ZIPQPRRC5-ZIPQPRR15-ZIPQPRR25);
pour z=1,2:
ZIPQPRR4z = positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTz*RPQPRR4/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRVz-ZIPQPRRCz-ZIPQPRR1z-ZIPQPRR2z-ZIPQPRR3z);
ZIPQPRRANT41 = positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT) * arr(IQUOTOTANT1*RPQPRR4/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT+GLRFTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANTV1-ZIPQPRRANTC1-ZIPQPRRANT11-ZIPQPRRANT21-ZIPQPRRANT31
        );
ZIPQPRR45 = positif(GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM) *arr(IQUOTOT5*RPQPRR4M/TONEQUOM1)
         + (1 - positif(GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM+GLRFTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRRV5-ZIPQPRRC5-ZIPQPRR15-ZIPQPRR25-ZIPQPRR35);
ZIPQPRR1TOT= somme(i=V,C,1..4 : ZIPQPRRi1);
ZIPQPRR2TOT= somme(i=V,C,1..4 : ZIPQPRRi2);
ZIPQPRR5TOT= somme(i=V,C,1..4 : ZIPQPRRi5);
ZIPQPRRANT1TOT= somme(i=V,C,1..4 : ZIPQPRRANTi1);
regle 50415:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRF1z = positif(GLRF2+GLTSTOT+GLTSREMPTOT+GLRVOTOT) * arr(IQUOTOTz*RPQRF1/TONEQUO1)
         + (1 - positif(GLRF2+GLTSTOT+GLTSREMPTOT+GLRVOTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT);
ZIPQRFANT11 = positif(GLRF2+GLTSTOT+GLTSREMPTOT+GLRVOTOT) * arr(IQUOTOTANT1*RPQRF1/TONEQUO1)
         + (1 - positif(GLRF2+GLTSTOT+GLTSREMPTOT+GLRVOTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT
        );
ZIPQRF15 = positif(GLRF2M+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM) *arr(IQUOTOT5*RPQRF1M/TONEQUOM1)
         + (1 - positif(GLRF2M+GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT);
pour z=1,2:
ZIPQRF2z = positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT) * arr(IQUOTOTz*RPQRF2/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRF1z);
ZIPQRFANT21 = positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT) * arr(IQUOTOTANT1*RPQRF2/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT+GLRVOTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT11
        );
ZIPQRF25 = positif(GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM) *arr(IQUOTOT5*RPQRF2M/TONEQUOM1)
         + (1 - positif(GLTSTOTM+GLTSREMPTOTM+GLRVOTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF15);
ZIPQRF1TOT= somme(i=1,2 : ZIPQRFi1);
ZIPQRF2TOT= somme(i=1,2 : ZIPQRFi2);
ZIPQRF5TOT= somme(i=1,2 : ZIPQRFi5);
ZIPQRFANT1TOT= somme(i=1,2 : ZIPQRFANTi1);
regle 50420:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRVOz = positif(GLRVO5+GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTz*RPQRVO/TONEQUO1)
         + (1 - positif(GLRVO5+GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT);
ZIPQRVOANT1 = positif(GLRVO5+GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQRVO/TONEQUO1)
         + (1 - positif(GLRVO5+GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT
        );
ZIPQRVO5 = positif(GLRVO5M+GLRVO6M+GLRVO7M+GLTSTOTM+GLTSREMPTOTM) *arr(IQUOTOT5*RPQRVOM/TONEQUOM1)
         + (1 - positif(GLRVO5M+GLRVO6M+GLRVO7M+GLTSTOTM+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT);
regle 50425:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRVO5z = positif(GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTz*RPQRVO5/TONEQUO1)
         + (1 - positif(GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOz);
ZIPQRVO5ANT1 = positif(GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQRVO5/TONEQUO1)
         + (1 - positif(GLRVO6+GLRVO7+GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1
        );
ZIPQRVO55 = positif(GLRVO6M+GLRVO7M+GLTSTOTM+GLTSREMPTOTM) *arr(IQUOTOT5*RPQRVO5M/TONEQUOM1)
         + (1 - positif(GLRVO6M+GLRVO7M+GLTSTOTM+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5);
regle 50430:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRVO6z = positif(GLRVO7+GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTz*RPQRVO6/TONEQUO1)
         + (1 - positif(GLRVO7+GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVO5z);
ZIPQRVO6ANT1 = positif(GLRVO7+GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQRVO6/TONEQUO1)
         + (1 - positif(GLRVO7+GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1-ZIPQRVO5ANT1
        );
ZIPQRVO65 = positif(GLRVO7M+GLTSTOTM+GLTSREMPTOTM) *arr(IQUOTOT5*RPQRVO6M/TONEQUOM1)
         + (1 - positif(GLRVO7M+GLTSTOTM+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5-ZIPQRVO55);
regle 50435:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQRVO7z = positif(GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTz*RPQRVO7/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVO5z-ZIPQRVO5z-ZIPQRVO6z);
ZIPQRVO7ANT1 = positif(GLTSTOT+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQRVO7/TONEQUO1)
         + (1 - positif(GLTSTOT+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1-ZIPQRVO5ANT1-ZIPQRVO6ANT1
        );
ZIPQRVO75 = positif(GLTSTOTM+GLTSREMPTOTM) *arr(IQUOTOT5*RPQRVO7M/TONEQUOM1)
         + (1 - positif(GLTSTOTM+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5-ZIPQRVO55-ZIPQRVO65);
ZIPQRVO1TOT= ZIPQRVO1 + ZIPQRVO51 + ZIPQRVO61 + ZIPQRVO71;
ZIPQRVO2TOT= ZIPQRVO2 + ZIPQRVO52 + ZIPQRVO62 + ZIPQRVO72;
ZIPQRVO5TOT= ZIPQRVO5 +ZIPQRVO55 +ZIPQRVO65 +ZIPQRVO75 ;
ZIPQRVOANT1TOT= ZIPQRVOANT1 + ZIPQRVO5ANT1 + ZIPQRVO6ANT1 + ZIPQRVO7ANT1;
regle 50440:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQTSVz = positif(somme(i= C,1..4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTz*RPQTSV/TONEQUO1)
         + (1 - positif(somme(i= C,1..4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT);
ZIPQTSANTV1 = positif(somme(i= C,1..4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQTSV/TONEQUO1)
         + (1 - positif(somme(i=C,1..4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT
        );
ZIPQTSV5 = positif(somme(i= C,1..4 : GLTSiM)+GLTSREMPTOTM) *arr(IQUOTOT5*RPQTSVM/TONEQUOM1)
         + (1 - positif(somme(i=C,1..4 : GLTSiM)+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT);
pour z=1,2:
ZIPQTSCz = positif(somme(i= 1..4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTz*RPQTSC/TONEQUO1)
         + (1 - positif(somme(i= 1..4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSVz);
ZIPQTSANTC1 = positif(somme(i= 1..4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQTSC/TONEQUO1)
         + (1 - positif(somme(i= 1..4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANTV1
        );
ZIPQTSC5 = positif(somme(i= 1..4 : GLTSiM)+GLTSREMPTOTM) *arr(IQUOTOT5*RPQTSCM/TONEQUOM1)
         + (1 - positif(somme(i= 1..4 : GLTSiM)+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTSV5);
pour z=1,2:
ZIPQTS1z = positif(somme(i= 2..4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTz*RPQTS1/TONEQUO1)
         + (1 - positif(somme(i= 2..4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSVz-ZIPQTSCz);
ZIPQTSANT11 = positif(somme(i= 2..4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQTS1/TONEQUO1)
         + (1 - positif(somme(i= 2..4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANTV1-ZIPQTSANTC1
        );
ZIPQTS15 = positif(somme(i= 2..4 : GLTSiM)+GLTSREMPTOTM) *arr(IQUOTOT5*RPQTS1M/TONEQUOM1)
         + (1 - positif(somme(i= 2..4 : GLTSiM)+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTSV5-ZIPQTSC5);
pour z=1,2:
ZIPQTS2z = positif(somme(i= 3,4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTz*RPQTS2/TONEQUO1)
         + (1 - positif(somme(i= 3,4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSVz-ZIPQTSCz-ZIPQTS1z);
ZIPQTSANT21 = positif(somme(i= 3,4 : GLTSi)+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQTS2/TONEQUO1)
         + (1 - positif(somme(i= 3,4 : GLTSi)+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANTV1-ZIPQTSANTC1-ZIPQTSANT11
        );
ZIPQTS25 = positif(somme(i= 3,4 : GLTSiM)+GLTSREMPTOTM) *arr(IQUOTOT5*RPQTS2M/TONEQUOM1)
         + (1 - positif(somme(i= 3,4 : GLTSiM)+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTSV5-ZIPQTSC5-ZIPQTS15);
pour z=1,2:
ZIPQTS3z = positif(GLTS4+GLTSREMPTOT) * arr(IQUOTOTz*RPQTS3/TONEQUO1)
         + (1 - positif(GLTS4+GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSVz-ZIPQTSCz-ZIPQTS1z-ZIPQTS2z);
ZIPQTSANT31 = positif(GLTS4+GLTSREMPTOT) * arr(IQUOTOTANT1*RPQTS3/TONEQUO1)
         + (1 - positif(GLTS4+GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANTV1-ZIPQTSANTC1-ZIPQTSANT11-ZIPQTSANT21
        );
ZIPQTS35 = positif(GLTS4M+GLTSREMPTOTM) *arr(IQUOTOT5*RPQTS3M/TONEQUOM1)
         + (1 - positif(GLTS4M+GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTSV5-ZIPQTSC5-ZIPQTS15-ZIPQTS25);
pour z=1,2:
ZIPQTS4z = positif(GLTSREMPTOT) * arr(IQUOTOTz*RPQTS4/TONEQUO1)
         + (1 - positif(GLTSREMPTOT)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSVz-ZIPQTSCz-ZIPQTS1z-ZIPQTS2z-ZIPQTS3z);
ZIPQTSANT41 = positif(GLTSREMPTOT) * arr(IQUOTOTANT1*RPQTS4/TONEQUO1)
         + (1 - positif(GLTSREMPTOT)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANTV1-ZIPQTSANTC1-ZIPQTSANT11-ZIPQTSANT21-ZIPQTSANT31
        );
ZIPQTS45 = positif(GLTSREMPTOTM) *arr(IQUOTOT5*RPQTS4M/TONEQUOM1)
         + (1 - positif(GLTSREMPTOTM)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTSV5-ZIPQTSC5-ZIPQTS15-ZIPQTS25-ZIPQTS35);
ZIPQTS1TOT= somme(i=V,C,1..4 : ZIPQTSi1);
ZIPQTS2TOT= somme(i=V,C,1..4 : ZIPQTSi2);
ZIPQTS5TOT= somme(i=V,C,1..4 : ZIPQTSi5);
ZIPQTSANT1TOT= somme(i=V,C,1..4 : ZIPQTSANTi1);
regle 50445:
application : bareme , iliad , batch  ;
pour z=1,2:
ZIPQTSREMPVz = positif(somme(i= C,1..4 : GLTSREMPi)) * arr(IQUOTOTz*RPQTSREMPV/TONEQUO1)
         + (1 - positif(somme(i= C,1..4 : GLTSREMPi))) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSzTOT);
ZIPQTSREMPANTV1 = positif(somme(i= C,1..4 : GLTSREMPi)) * arr(IQUOTOTANT1*RPQTSREMPV/TONEQUO1)
         + (1 - positif(somme(i= C,1..4 : GLTSREMPi))) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANT1TOT
        );
ZIPQTSREMPV5 = positif(somme(i= C,1..4 : GLTSREMPiM)) *arr(IQUOTOT5*RPQTSREMPVM/TONEQUOM1)
         + (1 - positif(somme(i= C,1..4 : GLTSREMPiM))) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTS5TOT);
pour z=1,2:
ZIPQTSREMPCz = positif(somme(i= 1..4 : GLTSREMPi)) * arr(IQUOTOTz*RPQTSREMPC/TONEQUO1)
         + (1 - positif(somme(i= 1..4 : GLTSREMPi))) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSzTOT-ZIPQTSREMPVz);
ZIPQTSREMPANTC1 = positif(somme(i= 1..4 : GLTSREMPi)) * arr(IQUOTOTANT1*RPQTSREMPC/TONEQUO1)
         + (1 - positif(somme(i= 1..4 : GLTSREMPi))) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANT1TOT-ZIPQTSREMPANTV1
        );
ZIPQTSREMPC5 = positif(somme(i= 1..4 : GLTSREMPiM)) *arr(IQUOTOT5*RPQTSREMPCM/TONEQUOM1)
         + (1 - positif(somme(i= 1..4 : GLTSREMPiM))) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTS5TOT-ZIPQTSREMPV5);
pour z=1,2:
ZIPQTSREMP1z = positif(somme(i= 2..4 : GLTSREMPi)) * arr(IQUOTOTz*RPQTSREMP1/TONEQUO1)
         + (1 - positif(somme(i= 2..4 : GLTSREMPi))) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSzTOT-ZIPQTSREMPVz-ZIPQTSREMPCz);
ZIPQTSREMPANT11 = positif(somme(i= 2..4 : GLTSREMPi)) * arr(IQUOTOTANT1*RPQTSREMP1/TONEQUO1)
         + (1 - positif(somme(i= 2..4 : GLTSREMPi))) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANT1TOT-ZIPQTSREMPANTV1-ZIPQTSREMPANTC1
        );
ZIPQTSREMP15 = positif(somme(i= 2..4 : GLTSREMPiM)) *arr(IQUOTOT5*RPQTSREMP1M/TONEQUOM1)
         + (1 - positif(somme(i= 2..4 : GLTSREMPiM))) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTS5TOT-ZIPQTSREMPV5-ZIPQTSREMPC5);
pour z=1,2:
ZIPQTSREMP2z = positif(somme(i= 3,4 : GLTSREMPi)) * arr(IQUOTOTz*RPQTSREMP2/TONEQUO1)
         + (1 - positif(somme(i= 3,4 : GLTSREMPi))) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSzTOT-ZIPQTSREMPVz-ZIPQTSREMPCz-ZIPQTSREMP1z);
ZIPQTSREMPANT21 = positif(somme(i= 3,4 : GLTSREMPi)) * arr(IQUOTOTANT1*RPQTSREMP2/TONEQUO1)
         + (1 - positif(somme(i= 3,4 : GLTSREMPi))) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANT1TOT-ZIPQTSREMPANTV1-ZIPQTSREMPANTC1-ZIPQTSREMPANT11
        );
ZIPQTSREMP25 = positif(somme(i= 3,4 : GLTSREMPiM)) *arr(IQUOTOT5*RPQTSREMP2M/TONEQUOM1)
         + (1 - positif(somme(i= 3,4 : GLTSREMPiM))) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTS5TOT-ZIPQTSREMPV5-ZIPQTSREMPC5-ZIPQTSREMP15);
pour z=1,2:
ZIPQTSREMP3z = positif(GLTSREMP4) * arr(IQUOTOTz*RPQTSREMP3/TONEQUO1)
         + (1 - positif(GLTSREMP4)) * 
         (IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSzTOT-ZIPQTSREMPVz-ZIPQTSREMPCz-ZIPQTSREMP1z-ZIPQTSREMP2z);
ZIPQTSREMPANT31 = positif(GLTSREMP4) * arr(IQUOTOTANT1*RPQTSREMP3/TONEQUO1)
         + (1 - positif(GLTSREMP4)) * 
         (IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANT1TOT-ZIPQTSREMPANTV1-ZIPQTSREMPANTC1-ZIPQTSREMPANT11-ZIPQTSREMPANT21
        );
ZIPQTSREMP35 = positif(GLTSREMP4M) *arr(IQUOTOT5*RPQTSREMP3M/TONEQUOM1)
         + (1 - positif(GLTSREMP4M)) * 
           (IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTS5TOT-ZIPQTSREMPV5-ZIPQTSREMPC5-ZIPQTSREMP15-ZIPQTSREMP25);
pour z=1,2:
ZIPQTSREMP4z = IQUOTOTz-ZIPQzTOT-ZIPQFzTOT-ZIPQPALIMzTOT-ZIPQRCMzTOT-ZIPQPRRzTOT-ZIPQRFzTOT-ZIPQRVOzTOT-ZIPQTSzTOT-ZIPQTSREMPVz-ZIPQTSREMPCz-ZIPQTSREMP1z-ZIPQTSREMP2z-ZIPQTSREMP3z;
ZIPQTSREMPANT41 = IQUOTOTANT1-ZIPQANT1TOT-ZIPQFANT1TOT-ZIPQPALIMANT1TOT-ZIPQRCMANT1TOT-ZIPQPRRANT1TOT-ZIPQRFANT1TOT-ZIPQRVOANT1TOT-ZIPQTSANT1TOT-ZIPQTSREMPANTV1-ZIPQTSREMPANTC1-ZIPQTSREMPANT11-ZIPQTSREMPANT21-ZIPQTSREMPANT31;
ZIPQTSREMP45 = IQUOTOT5-ZIPQ5TOT-ZIPQF5TOT-ZIPQPALIM5TOT-ZIPQRCM5TOT-ZIPQPRR5TOT-ZIPQRF5TOT-ZIPQRVO5TOT-ZIPQTS5TOT-ZIPQTSREMPV5-ZIPQTSREMPC5-ZIPQTSREMP15-ZIPQTSREMP25-ZIPQTSREMP35;
ZIPQTSREMP1TOT= somme(i=V,C,1..4 : ZIPQTSREMPi1);
ZIPQTSREMP2TOT= somme(i=V,C,1..4 : ZIPQTSREMPi2);
ZIPQTSREMP5TOT= somme(i=V,C,1..4 : ZIPQTSREMPi5);
ZIPQTSREMPANT1TOT= somme(i=V,C,1..4 : ZIPQTSREMPANTi1);
regle 5040:
application : bareme , iliad , batch  ;
pour z=1,2:
IPQ0z = IN0z;
IPQANT01 = INANT01;
pour z=1,2:
IPQ1z = ZIPQ1z * 1;
IPQANT11 = ZIPQANT11 * 1;
pour z=1,2:
IPQ2z = ZIPQ2z * 2;
IPQANT21 = ZIPQANT21 * 2;
pour z=1,2:
IPQ3z = ZIPQ3z * 3;
IPQANT31 = ZIPQANT31 * 3;
pour z=1,2:
IPQ4z = ZIPQ4z * 4;
IPQANT41 = ZIPQANT41 * 4;
pour z=1,2;i=V,C,1..4:
IPQFiz = ZIPQFiz * COTFi;
pour i=V,C,1..4:
IPQFANTi1 = ZIPQFANTi1 * COTFi;
pour z=1,2;i=V,C:
IPQPALIMiz = ZIPQPALIMiz * PENSALNBi;
pour z=1,2;i=1..4:
IPQPALIMiz = ZIPQPALIMiz * PENSALNBPi;
pour i=V,C:
IPQPALIMANTi1 = ZIPQPALIMANTi1 * PENSALNBi;
pour i=1..4:
IPQPALIMANTi1 = ZIPQPALIMANTi1 * PENSALNBPi;
pour z=1,2:
IPQRCMDCz = ZIPQRCMDCz * REVACTNB;
IPQRCMDCANT1 = ZIPQRCMDCANT1 * REVACTNB;
pour z=1,2:
IPQRCMCHz = ZIPQRCMCHz * PROVIENB;
IPQRCMCHANT1 = ZIPQRCMCHANT1 * PROVIENB;
pour z=1,2:
IPQRCMFUz = ZIPQRCMFUz * REVPEANB;
IPQRCMFUANT1 = ZIPQRCMFUANT1 * REVPEANB;
pour z=1,2:
IPQRCMGOz = ZIPQRCMGOz * RESTUCNB;
IPQRCMGOANT1 = ZIPQRCMGOANT1 * RESTUCNB;
pour z=1,2:
IPQRCMTRz = ZIPQRCMTRz * INTERENB;
IPQRCMTRANT1 = ZIPQRCMTRANT1 * INTERENB;
pour z=1,2:
IPQRCMTSz = ZIPQRCMTSz * DISQUONB;
IPQRCMTSANT1 = ZIPQRCMTSANT1 * DISQUONB;
pour z=1,2;i=V,C:
IPQPRRiz = ZIPQPRRiz * CARPENBAi;
pour z=1,2;i=1..4:
IPQPRRiz = ZIPQPRRiz * CARPENBAPi;
pour i=V,C:
IPQPRRANTi1 = ZIPQPRRANTi1 * CARPENBAi;
pour i=1..4:
IPQPRRANTi1 = ZIPQPRRANTi1 * CARPENBAPi;
pour z=1,2:
IPQRF1z = ZIPQRF1z * FONCINB;
IPQRFANT11 = ZIPQRFANT11 * FONCINB;
pour z=1,2:
IPQRF2z = ZIPQRF2z * REAMORNB;
IPQRFANT21 = ZIPQRFANT21 * REAMORNB;
pour z=1,2:
IPQRVOz = ZIPQRVOz * RENTAXNB;
IPQRVOANT1 = ZIPQRVOANT1 * RENTAXNB;
pour z=1,2:
IPQRVO5z = ZIPQRVO5z * RENTAXNB5;
IPQRVO5ANT1 = ZIPQRVO5ANT1 * RENTAXNB5;
pour z=1,2:
IPQRVO6z = ZIPQRVO6z * RENTAXNB6;
IPQRVO6ANT1 = ZIPQRVO6ANT1 * RENTAXNB6;
pour z=1,2:
IPQRVO7z = ZIPQRVO7z * RENTAXNB7;
IPQRVO7ANT1 = ZIPQRVO7ANT1 * RENTAXNB7;
pour z=1,2;i=V,C:
IPQTSiz = ZIPQTSiz * CARTSNBAi;
pour z=1,2;i=1..4:
IPQTSiz = ZIPQTSiz * CARTSNBAPi;
pour i=V,C:
IPQTSANTi1 = ZIPQTSANTi1 * CARTSNBAi;
pour i=1..4:
IPQTSANTi1 = ZIPQTSANTi1 * CARTSNBAPi;
pour z=1,2;i=V,C:
IPQTSREMPiz = ZIPQTSREMPiz * REMPLANBi;
pour z=1,2;i=1..4:
IPQTSREMPiz = ZIPQTSREMPiz * REMPLANBPi;
pour i=V,C:
IPQTSREMPANTi1 = ZIPQTSREMPANTi1 * REMPLANBi;
pour i=1..4:
IPQTSREMPANTi1 = ZIPQTSREMPANTi1 * REMPLANBPi;
pour z=1,2:
IPQ100z = somme(x=1..4 : IPQxz) 
	+ somme(i=V,C,1..4:IPQFiz) 
	+ somme(i=V,C,1..4 : IPQPALIMiz) + somme(i=V,C,1..4 : IPQTSiz)
	+ somme(i=V,C,1..4 : IPQTSREMPiz)
	+ IPQRF11 + IPQRF21
	+ somme(i=V,C,1..4:IPQPRRiz)
	+ IPQRCMDCz + IPQRCMFUz + IPQRCMCHz + IPQRCMTSz + IPQRCMGOz + IPQRCMTRz
	+ IPQRVOz + IPQRVO5z + IPQRVO6z + IPQRVO7z ;
IPQANT1001 = somme(x=1..4:IPQANTx1)
	+ somme(i=V,C,1..4:IPQFANTi1) 
	+ somme(i=V,C,1..4 : IPQPALIMANTi1) + somme(i=V,C,1..4 : IPQTSANTi1)
	+ somme(i=V,C,1..4 : IPQTSREMPi1)
	+ IPQRFANT11 + IPQRFANT21
	+ somme(i=V,C,1..4:IPQPRRANTi1)
	+ IPQRCMDCANT1 + IPQRCMFUANT1 + IPQRCMCHANT1 + IPQRCMTSANT1 + IPQRCMGOANT1 + IPQRCMTRANT1
	+ IPQRVOANT1 + IPQRVO5ANT1 + IPQRVO6ANT1 + IPQRVO7ANT1 ;
regle 50470:
application : bareme , iliad , batch  ;
IPQ05 = IN05;
IPQ15 = ZIPQ15 * 1;
IPQ25 = ZIPQ25 * 2;
IPQ35 = ZIPQ35 * 3;
IPQ45 = ZIPQ45 * 4;

pour i=V,C,1..4:
IPQFi5 = ZIPQFi5 * COTFi;
pour i=V,C:
IPQPALIMi5 = ZIPQPALIMi5 * CARPENBAi;
pour i=1..4:
IPQPALIMi5 = ZIPQPALIMi5 * CARPENBAPi;
IPQRCMDC5 = ZIPQRCMDC5 * REVACTNB;
IPQRCMCH5 = ZIPQRCMCH5 * PROVIENB;
IPQRCMFU5 = ZIPQRCMFU5 * REVPEANB;
IPQRCMGO5 = ZIPQRCMGO5 * RESTUCNB;
IPQRCMTR5 = ZIPQRCMTR5 * INTERENB;
IPQRCMTS5 = ZIPQRCMTS5 * DISQUONB;
pour i=V,C:
IPQPRRi5 = ZIPQPRRi5 * PENSALNBi;
pour i=1..4:
IPQPRRi5 = ZIPQPRRi5 * PENSALNBPi;
IPQRF15 = ZIPQRF15 * FONCINB;
IPQRF25 = ZIPQRF25 * REAMORNB;
IPQRVO5 = ZIPQRVO5 * RENTAXNB;
IPQRVO55 = ZIPQRVO55 * RENTAXNB5;
IPQRVO65 = ZIPQRVO65 * RENTAXNB6;
IPQRVO75 = ZIPQRVO75 * RENTAXNB7;
pour i=V,C:
IPQTSi5 = ZIPQTSi5 * CARTSNBAi;
pour i=1..4:
IPQTSi5 = ZIPQTSi5 * CARTSNBAPi;
pour i=V,C:
IPQTSREMPi5 = ZIPQTSREMPi5 * REMPLANBi;
pour i=1..4:
IPQTSREMPi5 = ZIPQTSREMPi5 * REMPLANBPi;
IPQ1005 = somme(x=1..4 : IPQx5) 
	+ somme(i=V,C,1..4:IPQFi5) 
	+ somme(i=V,C,1..4 : IPQPALIMi5) + somme(i=V,C,1..4 : IPQTSi5)
	+ somme(i=V,C,1..4 : IPQTSREMPi5)
	+ IPQRF15 + IPQRF25
	+ somme(i=V,C,1..4:IPQPRRi5)
	+ IPQRCMDC5 + IPQRCMFU5 + IPQRCMCH5 + IPQRCMTS5 + IPQRCMGO5 + IPQRCMTR5
	+ IPQRVO5 + IPQRVO55 + IPQRVO65 + IPQRVO75 ;
regle 504:
application : bareme , iliad , batch  ;
pour x=0;z=1,2,3:
INxz=(max(ISx1z,ISx2z-PLA) * (1-positif(V_CR2+IPVLOC)))
     + (ISx1z * positif(V_CR2+IPVLOC));
pour x=0;z=1,2,3:
INANTxz=(max(ISx1z,ISx2z-PLANT) * (1-positif(V_CR2+IPVLOC)))
     + (ISx1z * positif(V_CR2+IPVLOC));
pour x=5;z=1,2:
INxz=(max(ISx1z,ISx2z-PLA) * (1-positif(V_CR2+IPVLOC)))
     + (ISx1z * positif(V_CR2+IPVLOC));
pour x=5;z=1,2:
INANTxz=(max(ISx1z,ISx2z-PLANT) * (1-positif(V_CR2+IPVLOC)))
     + (ISx1z * positif(V_CR2+IPVLOC));
IN04 = max(IS014,IS024 - PLA);
IN06 = max(IS016,IS026 - PLA);
pour x=0,5:
INx5=ISx15;
regle 505:
application : bareme, iliad , batch  ;
pour z=1,2:
IDOM1z =  (max(ID1z - ADOz, IMI)*(1-INDTXMOY)
         + IMO * INDTXMOY ) * (1 - positif(RE168+TAX1649));
IDOM14 = max(ID14 - ADO4, IMI) *(1-INDTXMOY)
         + IMO * INDTXMOY ;
IDOM16 = max(ID16 - ADO6, IMI) *(1-INDTXMOY)
         + IMO * INDTXMOY ;
regle 5050:
application : bareme, iliad , batch  ;
BOOL_0AZ =  null((V_0AZ -  inf(V_0AZ/ 10000) * 10000) - V_ANREV );
regle 5051:
application : bareme , iliad , batch  ;


PLAFCDPART = positif(V_0AE + V_BT0AE + ZONEANTEK + V_0AL) *  PLAF_CDPART * positif(V_0AL)
             + positif(V_0AE * positif(V_BT0AE + ZONEANTEK)) * (1-positif(V_0AL)) *  PLAF_CDPART2 ;


PLANT =  PLAQAR + PLAF_DEMIPART * 2 * ((NBPT - NBQAR) - 1 - BOOL_0AM - BOOL_0AZ  * V_0AV)
        - (2 * PLAF_DEMIPART - PLAF_COMPPART) * 2 * NPS 
					      * (V_0AC+V_0AD+V_0AV*(1-positif(V_0BT))) * min(1,EAC)
        - (PLAF_DEMIPART - PLAFCDPART) * (1 - BOOL_0AM) 
              * 2 * NSA * (1-positif(V_0AW)*positif_ou_nul(AGV-LIM_AGE_LET_S))
              * (1-V_0AG)
	       ;


PLACOMP = PLAFIMP * positif(V_0AV * (V_0CF + V_0DJ + V_0CH + V_0CR + V_9XX)
				  * (1-positif(V_0AZ)))
	  + 2 * PLAF_PLACOMP * max(0 , NIN + NSA2 + NCC) 
                + arr(PLAF_PLACOMP / 2 *  V_0CI) ;

regle 5053:
application : bareme , iliad , batch  ;
VAR0AV = positif(V_0BT * V_0AV);
VAR0BT = (1-positif(null(V_0BT+0) + positif(V_0BT * V_0AV)));
NBMIQAR  =   null (VAR0BT) * ( 
                                 null (V_0CF+V_0DJ+V_0CR +0)    * (  2 * (V_0CH-2) * positif (V_0CH- 2)
                                                                         + (1) * positif (V_0CH+0)
                                                                         + (1) * positif(V_0CH-1)
                                                                  )
                                +  null(V_0CF+V_0DJ+V_0CR -1)   * (  2 * (V_0CH -1 ) * positif(V_0CH -1)
                                                                        +  1 * positif (V_0CH+0)
                                                                  )
                                +  positif_ou_nul(V_0CF+V_0DJ+V_0CR -2) * 2 * V_0CH 
                                             );



NB0BTMIQAR  =  null(1 -VAR0BT ) * ( null (V_0CF+V_0DJ+V_0CR +0) * 2 * (V_0CH-2) * positif (V_0CH- 2)
                                   ); 

NB0BT2MIQAR =  null(1 -VAR0BT) * ( null (V_0CF+V_0DJ+V_0CR +0) * ( positif (V_0CH+0) + positif (V_0CH-1))
                                   );



NB0BTQAR   =   null(1 -VAR0BT)* ( null(V_0CF+V_0DJ+V_0CR -1)   * (  2 * (V_0CH -1 ) * positif(V_0CH -1)
                                                                        +  1 * positif (V_0CH+0)
                                                                        )
                                +  positif_ou_nul(V_0CF+V_0DJ+V_0CR -2) * 2 * V_0CH
                                 );

PLAQAR = arr(   PLAF_DEMIPART /2 * (NBMIQAR  + NB0BTMIQAR + NB0BTQAR  +  V_0CI )
              + PLAF_COMPPART /2 *  NB0BT2MIQAR 
            );        
  

regle 5056:
application : bareme , iliad , batch  ;
PLA = PLANT + PLACOMP ;
PLAFQFT = PLANT  ;
regle 506:
application : bareme , iliad , batch  ;
pour x=0;y=1,2;z=1,2,3:
ISxyz = arr(DSxyz * NBy);
pour x=5;y=1,2;z=1,2:
ISxyz = arr(DSxyz * NBy);
pour y=1,2:
IS0y4 = arr(DS0y4 * NBy);
pour x=0,5:
ISx15 = arr(DSx15 * NB1);
pour y=1,2:
IS0y6 = arr(DS0y6 * NBy);
regle 5061:
application : bareme , iliad , batch  ;
pour z=1,2,4:
ADOz = arr(min(ID1z * (TX_RABDOM / 100)
             * ((PRODOM * max(0,1 - V_EAD - V_EAG) / RG ) + V_EAD),PLAF_RABDOM))
     + arr(min(ID1z * (TX_RABGUY / 100)
             * ((PROGUY * max(0,1 - V_EAD - V_EAG) / RG ) + V_EAG),PLAF_RABGUY))
	    ;

ADO6 = arr(min(ID16 * (TX_RABDOM / 100)
             * ((PRODOM * max(0,1 - V_EAD - V_EAG) / RB06 ) + V_EAD),PLAF_RABDOM))
     + arr(min(ID16 * (TX_RABGUY / 100)
             * ((PROGUY * max(0,1 - V_EAD - V_EAG) / RB06 ) + V_EAG),PLAF_RABGUY))
	    ;
pour z=1,2:
ADO3z = arr(min(IPQz * (TX_RABDOM / 100)
             * ((PRODOM * max(0,1 - V_EAD - V_EAG) / RG ) + V_EAD),PLAF_RABDOM))
      + arr(min(IPQz * (TX_RABGUY / 100)
	     * ((PROGUY * max(0,1 - V_EAD - V_EAG) / RG ) + V_EAG),PLAF_RABGUY))
	    ;
