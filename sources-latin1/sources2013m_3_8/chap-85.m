#*************************************************************************************************************************
#
#Copyright or © or Copr.[DGFIP][2017]
#
#Ce logiciel a été initialement développé par la Direction Générale des 
#Finances Publiques pour permettre le calcul de l'impôt sur le revenu 2014 
#au titre des revenus perçus en 2013. La présente version a permis la 
#génération du moteur de calcul des chaînes de taxation des rôles d'impôt 
#sur le revenu de ce millésime.
#
#Ce logiciel est régi par la licence CeCILL 2.1 soumise au droit français 
#et respectant les principes de diffusion des logiciels libres. Vous pouvez 
#utiliser, modifier et/ou redistribuer ce programme sous les conditions de 
#la licence CeCILL 2.1 telle que diffusée par le CEA, le CNRS et l'INRIA  sur 
#le site "http://www.cecill.info".
#
#Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris 
#connaissance de la licence CeCILL 2.1 et que vous en avez accepté les termes.
#
#**************************************************************************************************************************

regle 8501 :
application : iliad , batch  ;
 pour i= V,C,P:                                           
BIPTAi = (BICNOi - (BICDNi * (1 - positif(ART1731BIS))) );           
pour i= V,C,P:                                           
BIPTTAi = (BIPTAi + BI1Ai);              
regle 85010 :
application : iliad  ;
 pour i= V,C,P:                                           
BIPTAi1731R = (BICNOi - BICDNi);           
regle 8503 :
application : iliad , batch  ;

VARBICDEV = min(BICREV,BICDEV);
VARBICDEC = min(BICREC,BICDEC);
VARBICDEP = min(BICREP,BICDEP);
pour i= V,C,P:                                           
BINTAi = (BICREi - (min(BICDEi,max(BICREV_P,BICDEi1731+0)) * positif(ART1731BIS)  + BICDEi * (1 - ART1731BIS)) );        
                                                         
pour i= V,C,P:                                           
BINTTAi = (BINTAi + BI2Ai);           
regle 85031 :
application : iliad ;
pour i= V,C,P:                                           
BINTAi1731R = (BICREi - BICDEi );        
                                                         
pour i= V,C,P:                                           
BINTTAi1731R = (BINTAi + BI2Ai);           
                                                         
                                                         
regle 8506 :
application : iliad , batch  ;
 
pour i= V,C,P:                                           
BI12Ai = BI1Ai +  BI2Ai;

regle 8508 :
application : iliad , batch  ;

pour i= V,C,P:                                           
BITAi = BIPTAi + BINTAi;

pour i= V,C,P:                                           
BITTAi = BITAi + BI12Ai;
regle 85081 :
application : iliad ;

pour i= V,C,P:                                           
BITAi1731R = BIPTAi1731R + BINTAi1731R;

pour i= V,C,P:                                           
BITTAi1731R = BITAi1731R + BI12Ai;


regle 857:
application : iliad , batch  ;
BI1 = somme(i=V,C,P:BI1i);
BI2 = somme(i=V,C,P:BI2i);
regle 8571:
application : iliad , batch  ;
pour i = V,C,P:
BI1i = BI1Ai;
pour i = V,C,P:
BI2i = BI2Ai;
regle 8580:
application : iliad , batch ;
pour i = V,P,C:
BIHTAi = max(0,arr((BIHNOi - (BIHDNi * (1 - positif(ART1731BIS)))) * MAJREV))
         + min(0,(BIHNOi - (BIHDNi * (1 - positif(ART1731BIS) ))) );

VARBICHDEV = min(BICHREV,BICHDEV);
VARBICHDEC = min(BICHREC,BICHDEC);
VARBICHDEP = min(BICHREP,BICHDEP);
pour i = V,P,C:
BINHTAi = max(0,arr((BICHREi - (min(BICHDEi,max(BICHREi_P,BICHDEi1731+0)) * positif(ART1731BIS) + BICHDEi * (1 - ART1731BIS)))*MAJREV))
          + min(0,(BICHREi - (min(BICHDEi,max(BICHREi_P,BICHDEi1731+0)) * positif(ART1731BIS) + BICHDEi * (1 - ART1731BIS))) ) ;
regle 85801:
application : iliad ;
pour i = V,P,C:
BIHTAi1731R = max(0,arr((BIHNOi - BIHDNi) * MAJREV))
         + min(0,(BIHNOi - BIHDNi) );

pour i = V,P,C:
BINHTAi1731R = max(0,arr((BICHREi - BICHDEi)*MAJREV))
          + min(0,(BICHREi - BICHDEi ))  ;
regle 85200:
application : iliad , batch ;

pour i = V,C,P:
MIB_TVENi = MIBVENi + MIBNPVENi + MIBGITEi+LOCGITi;

pour i = V,C,P:
MIB_TPRESi = MIBPRESi + MIBNPPRESi + MIBMEUi;

pour i = V,C,P:
MIB_TTi = MIB_TVENi + MIB_TPRESi;

regle 85240:
application : iliad , batch ;

pour i = V,C,P:
MIB_AVi = min ( MIB_TVENi,
                         (max(MIN_MBIC,
                              arr( MIB_TVENi*TX_MIBVEN/100))
                         )
              );
pour i = V,C,P:
PMIB_AVi = min ( MIBVENi,
                         (max(MIN_MBIC,
                              arr( MIBVENi*TX_MIBVEN/100))
                         )
              );


pour i = V,C,P:
MIB_APi = min ( MIB_TPRESi,
                         (max(MIN_MBIC,
                              arr(MIB_TPRESi*TX_MIBPRES/100))
                         )
               );
pour i = V,C,P:
PMIB_APi = min ( MIBPRESi,
                         (max(MIN_MBIC,
                              arr(MIBPRESi*TX_MIBPRES/100))
                         )
               );



regle 85250:
application : iliad , batch ;

pour i = V,C,P:
MIB_ABVi = max(0,arr(MIB_AVi * MIBVENi / MIB_TVENi));
pour i = V,C,P:
MIB_ABNPVi = max(0,arr(MIB_AVi * MIBNPVENi / MIB_TVENi))* positif(present(MIBGITEi)+present(LOCGITi))
	      + (MIB_AVi - MIB_ABVi) * (1 - positif(present(MIBGITEi)+present(LOCGITi)));
pour i = V,C,P:
MIB_ABNPVLi = (MIB_AVi - MIB_ABVi - MIB_ABNPVi) * positif(present(MIBGITEi)+present(LOCGITi));

pour i = V,C,P:
MIB_ABPi = max(0,arr(MIB_APi * MIBPRESi / MIB_TPRESi));
pour i = V,C,P:
MIB_ABNPPi = max(0,arr(MIB_APi * MIBNPPRESi / MIB_TPRESi)) * present(MIBMEUi)
	      + (MIB_APi - MIB_ABPi) * (1 - present(MIBMEUi));
pour i = V,C,P:
MIB_ABNPPLi = (MIB_APi - MIB_ABPi - MIB_ABNPPi) *  present(MIBMEUi);


regle 85260:
application : iliad , batch ;

pour i = V,C,P:
MIB_NETVi = MIBVENi - MIB_ABVi;
MIBNETVF = somme(i=V,C,P:MIB_NETVi) ;
pour i = V,C,P:
MIB_NETNPVi = MIBNPVENi - MIB_ABNPVi;
MIBNETNPVF = somme(i=V,C,P:MIB_NETNPVi);
pour i = V,C,P:
MIB_NETNPVLi = MIBGITEi+ LOCGITi - MIB_ABNPVLi;
pour i = V,C,P:
MIBNETNPVLSi = arr(MIB_NETNPVLi * MIBGITEi / (MIBGITEi + LOCGITi));
pour i = V,C,P:
MIBNETNPVLNSi = MIB_NETNPVLi - MIBNETNPVLSi;
MIBNETNPVLF = somme(i=V,C,P:MIB_NETNPVLi);

pour i = V,C,P:
MIB_NETPi = MIBPRESi - MIB_ABPi;
MIBNETPF = somme(i=V,C,P:MIB_NETPi) ;
pour i = V,C,P:
MIB_NETNPPi = MIBNPPRESi - MIB_ABNPPi;
MIBNETNPPF = somme(i=V,C,P:MIB_NETNPPi);
pour i = V,C,P:
MIB_NETNPPLi = MIBMEUi - MIB_ABNPPLi;
MIBNETNPPLF = somme(i=V,C,P:MIB_NETNPPLi);

pour i = V,C,P:
PMIB_NETVi = MIBVENi - PMIB_AVi;
pour i = V,C,P:
PMIB_NETPi = MIBPRESi - PMIB_APi;



regle 85265:
application : iliad , batch ;
MIB_NETCT = MIBPVV + MIBPVC + MIBPVP - BICPMVCTV - BICPMVCTC - BICPMVCTP;

MIB_NETNPCT = MIBNPPVV + MIBNPPVC + MIBNPPVP - MIBNPDCT ;


regle 85270:
application : iliad , batch ;

pour i=V,C,P:
MIB_P1Ai = MIB1Ai - MIBDEi ;
pour i=V,C,P:
MIB_NP1Ai = MIBNP1Ai - MIBNPDEi ;
pour i=V,C,P:
MIB_1Ai = max(0,MIB_P1Ai + MIB_NP1Ai);
MIB_1AF = max (0, somme(i=V,C,P:MIB_1Ai));
regle 85390:
application : iliad , batch ;
pour i = V,C,P:
REVIBI12i = BIH1i + BIH2i + BI1Ai + BI2Ai;
regle 85700:
application : iliad , batch ;
BICPF = somme(i=V,C,P:BIPTAi+BIHTAi+MIB_NETVi+MIB_NETPi) + MIB_NETCT  ; 
regle 857001:
application : iliad ;
BICPF1731R = somme(i=V,C,P:BIPTAi1731R+BIHTAi1731R+MIB_NETVi+MIB_NETPi) + MIB_NETCT  ; 
regle 85730:
application : iliad , batch ;
DEFNP  = somme (i=1,2,3,4,5,6:(min(DEFBICi,DEFBICi1731+0) * positif(ART1731BIS) + DEFBICi * (1 - ART1731BIS)));
TOTDEFNP = null(4-V_IND_TRAIT) * DEFNP
	 + null(5-V_IND_TRAIT) * max(0,min(DEFNP,TOTDEFNP1731*ART1731BIS
				  + DEFNP * (1-ART1731BIS)));
pour i = V,C,P:
BICNPi = BINTAi+BINHTAi+  MIB_NETNPVi + MIB_NETNPPi ;
BICNPF = max(0,somme(i=V,C,P:BICNPi)+MIB_NETNPCT - TOTDEFNP)  ; 
DEFNPI = (abs(min( DEFNP , somme(i=V,C,P:BICNPi*positif(BICNPi))))) * positif(BICNPV+BICNPC+BICNPP)
	 * (1-positif(ART1731BIS))
	 + TOTDEFNP1731 * positif(ART1731BIS);
regle 857301:
application : iliad , batch ;
DEFNP1731R  = somme (i=1,2,3,4,5,6:(min(DEFBICi,DEFBICi1731+0) * positif(ART1731BIS) + DEFBICi * (1 - ART1731BIS)));
TOTDEFNP1731R = null(4-V_IND_TRAIT) * DEFNP1731R
	 + null(5-V_IND_TRAIT) * max(0,min(DEFNP1731R,TOTDEFNP1731*ART1731BIS
				  + DEFNP1731R * (1-ART1731BIS)));
pour i = V,C,P:
BICNPi1731R = BINTAi1731R+BINHTAi1731R+  MIB_NETNPVi + MIB_NETNPPi ;
BICNPF1731R = max(0,somme(i=V,C,P:BICNPi1731R)+MIB_NETNPCT - TOTDEFNP)  ; 
DEFNPI1731R = (abs(min( DEFNP1731R , somme(i=V,C,P:BICNPi1731R*positif(BICNPi1731R)))))
	 * (1-positif(ART1731BIS))
	 + TOTDEFNP1731 * positif(ART1731BIS);


regle 85740:
application : iliad , batch ;
BICNPR = somme(i=V,C,P:BINTAi);
regle 85750:
application : iliad , batch ;
BI12F = somme(i=V,C,P:REVIBI12i) + MIB_1AF  ; 
regle 85900:
application : iliad , batch  ;                   
pour i=V,C,P:                                       
BICIMPi = BIHTAi +  BIPTAi + MIB_NETVi + MIB_NETPi;
BIN = BICPF + BICNPF ;
regle 859001:
application : iliad ;                   
pour i=V,C,P:                                       
BICIMPi1731R = BIHTAi1731R +  BIPTAi1731R + MIB_NETVi + MIB_NETPi;
BIN1731R = BICPF1731R + BICNPF1731R ;
regle 85960:
application : batch, iliad ;



DCTMIB = (BICPMVCTV + BICPMVCTC + BICPMVCTP) * positif_ou_nul(BIPN+MIB_NETCT)
	 + (1-positif_ou_nul(BIPN+MIB_NETCT)) * ((BICPMVCTV +BICPMVCTC +BICPMVCTP ) - abs(BIPN+MIB_NETCT))
	 + (1-positif_ou_nul(BIPN+MIB_NETCT)) * null((BICPMVCTV +BICPMVCTC +BICPMVCTP) - abs(BIPN+MIB_NETCT)) * (BICPMVCTV +BICPMVCTC +BICPMVCTP)
	 ;
DCTMIBNP = MIBNPDCT * positif_ou_nul(BINNV+BINNC+BINNP+MIB_NETNPCT)
	 + (1-positif_ou_nul(BINNV+BINNC+BINNP+MIB_NETNPCT)) * (MIBNPDCT - abs(BINNV+BINNC+BINNP+MIB_NETNPCT))
	 + (1-positif_ou_nul(BINNV+BINNC+BINNP+MIB_NETNPCT)) * null(MIBNPDCT - abs(BINNV+BINNC+BINNP+MIB_NETNPCT))*MIBNPDCT
	 ;
regle 90000:
application : iliad , batch  ;                   
DEPLOCV = (LOCPROCGAV - LOCDEFPROCGAV) + (LOCPROV - LOCDEFPROV) ;
DEPLOCC = (LOCPROCGAC - LOCDEFPROCGAC) + (LOCPROC - LOCDEFPROC) ;
DEPLOCP = (LOCPROCGAP - LOCDEFPROCGAP) + (LOCPROP - LOCDEFPROP) ;
DENPLOCAFFV = positif(present(LOCNPCGAV) + present(LOCGITCV) + present(LOCDEFNPCGAV) + present(LOCNPV) + present(LOCGITHCV) + present(LOCDEFNPV)) ;
DENPLOCAFFC = positif(present(LOCNPCGAC) + present(LOCGITCC) + present(LOCDEFNPCGAC) + present(LOCNPC) + present(LOCGITHCC) + present(LOCDEFNPC)) ;
DENPLOCAFFP = positif(present(LOCNPCGAPAC) + present(LOCGITCP) + present(LOCDEFNPCGAPAC) + present(LOCNPPAC) + present(LOCGITHCP) + present(LOCDEFNPPAC)) ;

DENPLOCV = (LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV) + (LOCNPV + LOCGITHCV - LOCDEFNPV) ;
DENPLOCC = (LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC) + (LOCNPC + LOCGITHCC - LOCDEFNPC) ;
DENPLOCP = (LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC) + (LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) ;

PLOCCGAV = LOCPROCGAV - (LOCDEFPROCGAV * (1 - positif(ART1731BIS) ));
PLOCCGAC = LOCPROCGAC - (LOCDEFPROCGAC * (1 - positif(ART1731BIS) ));
PLOCCGAPAC = LOCPROCGAP - (LOCDEFPROCGAP * (1 - positif(ART1731BIS) ));
VARLOCDEFNPCGAV = min(LOCNPCGAV,LOCDEFNPCGAV);
VARLOCDEFNPCGAC = min(LOCNPCGAC,LOCDEFNPCGAC);
VARLOCDEFNPCGAP = min(LOCNPCGAPAC,LOCDEFNPCGAPAC);
NPLOCCGAV = LOCNPCGAV + LOCGITCV - (min(LOCDEFNPCGAV,LOCDEFNPCGAV1731+0) * positif(ART1731BIS) + LOCDEFNPCGAV * (1 - ART1731BIS));
NPLOCCGAC = LOCNPCGAC + LOCGITCC - (min(LOCDEFNPCGAC,LOCDEFNPCGAC1731+0) * positif(ART1731BIS) + LOCDEFNPCGAC * (1 - ART1731BIS));
NPLOCCGAPAC = LOCNPCGAPAC + LOCGITCP - (min(LOCDEFNPCGAPAC,LOCDEFNPCGAPAC1731+0) * positif(ART1731BIS) + LOCDEFNPCGAPAC * (1 - ART1731BIS));
NPLOCCGASSV = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV;
NPLOCCGASSC = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC;
NPLOCCGASSPAC = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC;
NPLOCCGASV = arr(NPLOCCGAV * LOCNPCGAV / (LOCNPCGAV + LOCGITCV))* present(LOCNPCGAV) + min(0,NPLOCCGAV) * (1-present(LOCNPCGAV));
NPLOCCGASC = arr(NPLOCCGAC * LOCNPCGAC / (LOCNPCGAC + LOCGITCC))* present(LOCNPCGAC) + min(0,NPLOCCGAC) * (1-present(LOCNPCGAC));
NPLOCCGASP = arr(NPLOCCGAPAC * LOCNPCGAPAC / (LOCNPCGAPAC + LOCGITCP))* present(LOCNPCGAPAC) + min(0,NPLOCCGAPAC) * (1-present(LOCNPCGAPAC));
NPLOCCGANSV = NPLOCCGAV - NPLOCCGASV;
NPLOCCGANSC = NPLOCCGAC - NPLOCCGASC;
NPLOCCGANSP = NPLOCCGAPAC - NPLOCCGASP;
PLOCV = min(0,LOCPROV - (LOCDEFPROV * (1 - positif(ART1731BIS) )))
				 * positif_ou_nul((LOCDEFPROV * (1 - positif(ART1731BIS) )) - LOCPROV)
	       + arr(max(0, LOCPROV - (LOCDEFPROV * (1 - positif(ART1731BIS) ))) * MAJREV) 
						       * positif(LOCPROV - (LOCDEFPROV * (1 - positif(ART1731BIS) )));
PLOCC = min(0,LOCPROC - (LOCDEFPROC * (1 - positif(ART1731BIS) ))) 
			  * positif_ou_nul((LOCDEFPROC * (1 - positif(ART1731BIS) ))- LOCPROC) 
	       + arr(max(0, LOCPROC - (LOCDEFPROC * (1 - positif(ART1731BIS) ))) * MAJREV) 
					  * positif(LOCPROC - (LOCDEFPROC * (1 - positif(ART1731BIS) )));
PLOCPAC = min(0,LOCPROP - (LOCDEFPROP * (1 - positif(ART1731BIS) ))) 
			      * positif_ou_nul((LOCDEFPROP * (1 - positif(ART1731BIS) ))- LOCPROP) 
	       + arr(max(0, LOCPROP - (LOCDEFPROP * (1 - positif(ART1731BIS) ))) * MAJREV) 
				   * positif(LOCPROP - (LOCDEFPROP * (1 - positif(ART1731BIS) )));
VARLOCDEFNPV = min(LOCDEFNPV,LOCNPV);
VARLOCDEFNPC = min(LOCDEFNPC,LOCNPC);
VARLOCDEFNPP = min(LOCDEFNPPAC,LOCNPPAC);
NPLOCV = min(0,LOCNPV + LOCGITHCV - (min(LOCDEFNPV,LOCDEFNPV1731+0) * positif(ART1731BIS) + LOCDEFNPV * (1 - ART1731BIS))) 
				       * positif_ou_nul((min(LOCDEFNPV,LOCDEFNPV1731+0) * positif(ART1731BIS) + LOCDEFNPV * (1 - ART1731BIS))- LOCNPV- LOCGITHCV ) 
	       + arr(max(0, LOCNPV + LOCGITHCV - (min(LOCDEFNPV,LOCDEFNPV1731+0) * positif(ART1731BIS) + LOCDEFNPV * (1 - ART1731BIS))) * MAJREV) 
				 * positif(LOCNPV + LOCGITHCV - (min(LOCDEFNPV,LOCDEFNPV1731+0) * positif(ART1731BIS) + LOCDEFNPV * (1 - ART1731BIS)));

NPLOCC = min(0,LOCNPC + LOCGITHCC - (min(LOCDEFNPC,LOCDEFNPC1731+0) * positif(ART1731BIS) + LOCDEFNPC * (1 - ART1731BIS))) 
				       * positif_ou_nul((min(LOCDEFNPC,LOCDEFNPC1731+0) * positif(ART1731BIS) + LOCDEFNPC * (1 - ART1731BIS))- LOCNPC- LOCGITHCC ) 
	       + arr(max(0, LOCNPC + LOCGITHCC - (min(LOCDEFNPC,LOCDEFNPC1731+0) * positif(ART1731BIS) + LOCDEFNPC * (1 - ART1731BIS))) * MAJREV) 
						 * positif(LOCNPC + LOCGITHCC - (min(LOCDEFNPC,LOCDEFNPC1731+0) * positif(ART1731BIS) + LOCDEFNPC * (1 - ART1731BIS)));

NPLOCPAC = min(0,LOCNPPAC + LOCGITHCP - (min(LOCDEFNPPAC,LOCDEFNPPAC1731+0) * positif(ART1731BIS) + LOCDEFNPPAC * (1 - ART1731BIS))) 
				       * positif_ou_nul( (min(LOCDEFNPPAC,LOCDEFNPPAC1731+0) * positif(ART1731BIS) + LOCDEFNPPAC * (1 - ART1731BIS))- LOCNPPAC- LOCGITHCP ) 
	       + arr(max(0, LOCNPPAC + LOCGITHCP - (min(LOCDEFNPPAC,LOCDEFNPPAC1731+0) * positif(ART1731BIS) + LOCDEFNPPAC * (1 - ART1731BIS))) * MAJREV) 
						 * positif(LOCNPPAC + LOCGITHCP - (min(LOCDEFNPPAC,LOCDEFNPPAC1731+0) * positif(ART1731BIS) + LOCDEFNPPAC * (1 - ART1731BIS)));
NPLOCSSV = min(0,LOCNPV + LOCGITHCV - LOCDEFNPV) 
				       * positif_ou_nul(LOCDEFNPV- LOCNPV- LOCGITHCV ) 
	       + arr(max(0, LOCNPV + LOCGITHCV - LOCDEFNPV) * MAJREV) 
				 * positif(LOCNPV + LOCGITHCV -LOCDEFNPC );

NPLOCSSC = min(0,LOCNPC + LOCGITHCC - LOCDEFNPC) 
				       * positif_ou_nul(LOCDEFNPC- LOCNPC- LOCGITHCC ) 
	       + arr(max(0, LOCNPC + LOCGITHCC - LOCDEFNPC) * MAJREV) 
						 * positif(LOCNPC + LOCGITHCC - LOCDEFNPC);

NPLOCSSPAC = min(0,LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) 
				       * positif_ou_nul(LOCDEFNPPAC- LOCNPPAC- LOCGITHCP ) 
	       + arr(max(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) * MAJREV) 
						 * positif(LOCNPPAC + LOCGITHCP - LOCDEFNPPAC);
NPLOCSV = arr(NPLOCV * LOCNPV / (LOCNPV + LOCGITHCV))* positif(LOCNPV) + min(0,NPLOCV) * (1-positif(LOCNPV));
NPLOCSC = arr(NPLOCC * LOCNPC / (LOCNPC + LOCGITHCC))* present(LOCNPC) + min(0,NPLOCC) * (1-positif(LOCNPC));
NPLOCSP = arr(NPLOCPAC * LOCNPPAC / (LOCNPPAC + LOCGITHCP))* positif(LOCNPPAC) + min(0,NPLOCPAC) * (1-positif(LOCNPPAC));
NPLOCNSV = NPLOCV - NPLOCSV;
NPLOCNSC =  NPLOCC - NPLOCSC;
NPLOCNSP = NPLOCPAC - NPLOCSP;
regle 900001:
application : iliad ;                   
DEPLOCV1731R = (LOCPROCGAV - LOCDEFPROCGAV) + (LOCPROV - LOCDEFPROV) ;
DEPLOCC1731R = (LOCPROCGAC - LOCDEFPROCGAC) + (LOCPROC - LOCDEFPROC) ;
DEPLOCP1731R = (LOCPROCGAP - LOCDEFPROCGAP) + (LOCPROP - LOCDEFPROP) ;

DENPLOCV1731R = (LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV) + (LOCNPV + LOCGITHCV - LOCDEFNPV) ;
DENPLOCC1731R = (LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC) + (LOCNPC + LOCGITHCC - LOCDEFNPC) ;
DENPLOCP1731R = (LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC) + (LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) ;

PLOCCGAV1731R = LOCPROCGAV - LOCDEFPROCGAV;
PLOCCGAC1731R = LOCPROCGAC - LOCDEFPROCGAC;
PLOCCGAPAC1731R = LOCPROCGAP - LOCDEFPROCGAP;
NPLOCCGAV1731R = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV;
NPLOCCGAC1731R = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC;
NPLOCCGAPAC1731R = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC;
NPLOCCGASSV1731R = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV;
NPLOCCGASSC1731R = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC;
NPLOCCGASSPAC1731R = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC;
NPLOCCGASV1731R = arr(NPLOCCGASSV * LOCNPCGAV / (LOCNPCGAV + LOCGITCV))* present(LOCNPCGAV) + min(0,NPLOCCGASSV) * (1-present(LOCNPCGAV));
NPLOCCGASC1731R = arr(NPLOCCGASSC * LOCNPCGAC / (LOCNPCGAC + LOCGITCC))* present(LOCNPCGAC) + min(0,NPLOCCGASSC) * (1-present(LOCNPCGAC));
NPLOCCGASP1731R = arr(NPLOCCGASSPAC * LOCNPCGAPAC / (LOCNPCGAPAC + LOCGITCP))* present(LOCNPCGAPAC) + min(0,NPLOCCGASSPAC) * (1-present(LOCNPCGAPAC));
NPLOCCGANSV1731R = NPLOCCGAV - NPLOCCGASV;
NPLOCCGANSC1731R = NPLOCCGAC - NPLOCCGASC;
NPLOCCGANSP1731R = NPLOCCGAPAC - NPLOCCGASP;
PLOCV1731R = min(0,LOCPROV - LOCDEFPROV)
				 * positif_ou_nul(LOCDEFPROV - LOCPROV)
	       + arr(max(0, LOCPROV - LOCDEFPROV ) * MAJREV) 
						       * positif(LOCPROV - LOCDEFPROV);
PLOCC1731R = min(0,LOCPROC - LOCDEFPROC) 
			  * positif_ou_nul(LOCDEFPROC - LOCPROC) 
	       + arr(max(0, LOCPROC - LOCDEFPROC) * MAJREV) 
					  * positif(LOCPROC - LOCDEFPROC);
PLOCPAC1731R = min(0,LOCPROP - LOCDEFPROP) 
			      * positif_ou_nul(LOCDEFPROP- LOCPROP) 
	       + arr(max(0, LOCPROP - LOCDEFPROP) * MAJREV) 
				   * positif(LOCPROP - LOCDEFPROP);
NPLOCV1731R = min(0,LOCNPV + LOCGITHCV - LOCDEFNPV ) 
				       * positif_ou_nul(LOCDEFNPV- LOCNPV- LOCGITHCV ) 
	       + arr(max(0, LOCNPV + LOCGITHCV - LOCDEFNPV) * MAJREV) 
				 * positif(LOCNPV + LOCGITHCV - LOCDEFNPV);

NPLOCC1731R = min(0,LOCNPC + LOCGITHCC - LOCDEFNPC) 
				       * positif_ou_nul(LOCDEFNPC- LOCNPC- LOCGITHCC ) 
	       + arr(max(0, LOCNPC + LOCGITHCC - LOCDEFNPC) * MAJREV) 
						 * positif(LOCNPC + LOCGITHCC - LOCDEFNPC);

NPLOCPAC1731R = min(0,LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) 
				       * positif_ou_nul( LOCDEFNPPAC- LOCNPPAC- LOCGITHCP ) 
	       + arr(max(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) * MAJREV) 
						 * positif(LOCNPPAC + LOCGITHCP - LOCDEFNPPAC);
NPLOCSSV1731R = min(0,LOCNPV + LOCGITHCV - LOCDEFNPV) 
				       * positif_ou_nul(LOCDEFNPV- LOCNPV- LOCGITHCV ) 
	       + arr(max(0, LOCNPV + LOCGITHCV - LOCDEFNPV) * MAJREV) 
				 * positif(LOCNPV + LOCGITHCV -LOCDEFNPC );

NPLOCSSC1731R = min(0,LOCNPC + LOCGITHCC - LOCDEFNPC) 
				       * positif_ou_nul(LOCDEFNPC- LOCNPC- LOCGITHCC ) 
	       + arr(max(0, LOCNPC + LOCGITHCC - LOCDEFNPC) * MAJREV) 
						 * positif(LOCNPC + LOCGITHCC - LOCDEFNPC);

NPLOCSSPAC1731R = min(0,LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) 
				       * positif_ou_nul(LOCDEFNPPAC- LOCNPPAC- LOCGITHCP ) 
	       + arr(max(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) * MAJREV) 
						 * positif(LOCNPPAC + LOCGITHCP - LOCDEFNPPAC);
NPLOCSV1731R = arr(NPLOCSSV * LOCNPV / (LOCNPV + LOCGITHCV))* positif(LOCNPV) + min(0,NPLOCSSV) * (1-positif(LOCNPV));
NPLOCSC1731R = arr(NPLOCSSC * LOCNPC / (LOCNPC + LOCGITHCC))* present(LOCNPC) + min(0,NPLOCSSC) * (1-positif(LOCNPC));
NPLOCSP1731R = arr(NPLOCSSPAC * LOCNPPAC / (LOCNPPAC + LOCGITHCP))* positif(LOCNPPAC) + min(0,NPLOCSSPAC) * (1-positif(LOCNPPAC));
NPLOCNSV1731R = NPLOCV - NPLOCSV;
NPLOCNSC1731R =  NPLOCC - NPLOCSC;
NPLOCNSP1731R = NPLOCPAC - NPLOCSP;
regle 90010:
application : iliad , batch  ;                   
PLOCNETV = PLOCCGAV + PLOCV;
PLOCNETC = PLOCCGAC + PLOCC;
PLOCNETPAC = PLOCCGAPAC + PLOCPAC;
NPLOCNETTV = NPLOCCGAV + NPLOCV + MIB_NETNPVLV + MIB_NETNPPLV ;
NPLOCNETTC = NPLOCCGAC + NPLOCC + MIB_NETNPVLC + MIB_NETNPPLC ;
NPLOCNETTPAC = NPLOCCGAPAC + NPLOCPAC + MIB_NETNPVLP + MIB_NETNPPLP ;
NPLOCNETTSV = NPLOCCGASV + NPLOCSV + MIBNETNPVLSV + MIB_NETNPPLV ;
NPLOCNETTSC = NPLOCCGASC + NPLOCSC + MIBNETNPVLSC + MIB_NETNPPLC ;
NPLOCNETTSP = NPLOCCGASP + NPLOCSP + MIBNETNPVLSP + MIB_NETNPPLP ;
NPLOCNETV = NPLOCCGAV + NPLOCV ;
NPLOCNETC = NPLOCCGAC + NPLOCC ;
NPLOCNETPAC = NPLOCCGAPAC + NPLOCPAC ;
regle 900101:
application : iliad  ;                   
PLOCNETV1731R = PLOCCGAV1731R + PLOCV1731R;
PLOCNETC1731R = PLOCCGAC1731R + PLOCC1731R;
PLOCNETPAC1731R = PLOCCGAPAC1731R + PLOCPAC1731R;
NPLOCNETTV1731R = NPLOCCGAV1731R + NPLOCV1731R + MIB_NETNPVLV + MIB_NETNPPLV ;
NPLOCNETTC1731R = NPLOCCGAC1731R + NPLOCC1731R + MIB_NETNPVLC + MIB_NETNPPLC ;
NPLOCNETTPAC1731R = NPLOCCGAPAC1731R + NPLOCPAC1731R + MIB_NETNPVLP + MIB_NETNPPLP ;
NPLOCNETTSV1731R = NPLOCCGASV1731R + NPLOCSV1731R + MIBNETNPVLSV + MIB_NETNPPLV ;
NPLOCNETTSC1731R = NPLOCCGASC1731R + NPLOCSC1731R + MIBNETNPVLSC + MIB_NETNPPLC ;
NPLOCNETTSP1731R = NPLOCCGASP1731R + NPLOCSP1731R + MIBNETNPVLSP + MIB_NETNPPLP ;
NPLOCNETV1731R = NPLOCCGAV1731R + NPLOCV1731R ;
NPLOCNETC1731R = NPLOCCGAC1731R + NPLOCC1731R ;
NPLOCNETPAC1731R = NPLOCCGAPAC1731R + NPLOCPAC1731R ;
regle 90020:
application : iliad , batch  ;                   
PLOCNETF = PLOCNETV + PLOCNETC + PLOCNETPAC;
TOTDEFLOCNP = LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5
		+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1;
TOTDEFLOCNPBIS = null(4-V_IND_TRAIT) * (LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1 ) * (1-ART1731BIS)
                + null(5-V_IND_TRAIT) * max(0,min(LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1,
		TOTDEFLOCNP1731*ART1731BIS+ (LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1)*(1-ART1731BIS)));
TOTDEFLOCNPPS = LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5
	        + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1;
NPLOCNETF10 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS))
						      +(min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)));
NPLOCNETF9 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)));
NPLOCNETF8 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)));
NPLOCNETF7 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS)  + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS)  + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS)  + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS)  + LNPRODEF6 * (1 - ART1731BIS)));
NPLOCNETF6 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS)  + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS)  + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS)  + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS)  + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS)  + LNPRODEF5 * (1 - ART1731BIS)));
NPLOCNETF5 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
                                                  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS)  + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS)  + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS)  + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS)  + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS)  + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)));
NPLOCNETF4 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
                                                  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS) + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS) + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF3,LNPRODEF31731+0) * positif(ART1731BIS) + LNPRODEF3 * (1 - ART1731BIS)));
NPLOCNETF3 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS) + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS) + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF3,LNPRODEF31731+0) * positif(ART1731BIS) + LNPRODEF3 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF2,LNPRODEF21731+0) * positif(ART1731BIS) + LNPRODEF2 * (1 - ART1731BIS)) );
NPLOCNETF2 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS) + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS) + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF3,LNPRODEF31731+0) * positif(ART1731BIS) + LNPRODEF3 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF2,LNPRODEF21731+0) * positif(ART1731BIS) + LNPRODEF2 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF1,LNPRODEF11731+0) * positif(ART1731BIS) + LNPRODEF1 * (1 - ART1731BIS)));
NPLOCNETF = max(0,NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-TOTDEFLOCNPBIS);
NPLOCNETSF = max(0,NPLOCNETTSV + NPLOCNETTSC + NPLOCNETTSP-TOTDEFLOCNPBIS);
DNPLOCIMPU = (max(0,min(TOTDEFLOCNP,NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC)))
	     * (1-positif(ART1731BIS))
	     + TOTDEFLOCNP1731 * positif(ART1731BIS);
NPLOCNETFHDEFANT = max(0,NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC);
DEFNPLOCF = min(0,NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC-(TOTDEFLOCNPBIS-LNPRODEF10));
DEFNONPLOC = abs(DEFNPLOCF) ;
regle 900201:
application : iliad ;               
PLOCNETF1731R = PLOCNETV1731R + PLOCNETC1731R + PLOCNETPAC1731R;
TOTDEFLOCNP1731R = LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5
		+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1;
TOTDEFLOCNPBISR = null(4-V_IND_TRAIT) * (LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1 )
                + null(5-V_IND_TRAIT) * max(0,min(LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1,
		TOTDEFLOCNP1731*ART1731BIS+ (LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5+ LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1)*(1-ART1731BIS)));
TOTDEFLOCNPPSR= LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5
	        + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1;
NPLOCNETF101731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS))
						      +(min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)));
NPLOCNETF91731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)));
NPLOCNETF81731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						      +(min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)));
NPLOCNETF71731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS)  + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS)  + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS)  + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS)  + LNPRODEF6 * (1 - ART1731BIS)));
NPLOCNETF61731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS)  + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS)  + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS)  + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS)  + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS)  + LNPRODEF5 * (1 - ART1731BIS)));
NPLOCNETF51731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
                                                  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS)  + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS)  + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS)  + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS)  + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS)  + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)));
NPLOCNETF41731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
                                                  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS) + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS) + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF3,LNPRODEF31731+0) * positif(ART1731BIS) + LNPRODEF3 * (1 - ART1731BIS)));
NPLOCNETF31731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS) + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS) + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF3,LNPRODEF31731+0) * positif(ART1731BIS) + LNPRODEF3 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF2,LNPRODEF21731+0) * positif(ART1731BIS) + LNPRODEF2 * (1 - ART1731BIS)) );
NPLOCNETF21731R = NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-((min(LNPRODEF10,LNPRODEF101731+0) * positif(ART1731BIS) + LNPRODEF10 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF9,LNPRODEF91731+0) * positif(ART1731BIS) + LNPRODEF9 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF8,LNPRODEF81731+0) * positif(ART1731BIS) + LNPRODEF8 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF7,LNPRODEF71731+0) * positif(ART1731BIS) + LNPRODEF7 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF6,LNPRODEF61731+0) * positif(ART1731BIS) + LNPRODEF6 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF5,LNPRODEF51731+0) * positif(ART1731BIS) + LNPRODEF5 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF4,LNPRODEF41731+0) * positif(ART1731BIS) + LNPRODEF4 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF3,LNPRODEF31731+0) * positif(ART1731BIS) + LNPRODEF3 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF2,LNPRODEF21731+0) * positif(ART1731BIS) + LNPRODEF2 * (1 - ART1731BIS)) 
						  + (min(LNPRODEF1,LNPRODEF11731+0) * positif(ART1731BIS) + LNPRODEF1 * (1 - ART1731BIS)));
NPLOCNETF1731R = max(0,NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-TOTDEFLOCNPBISR);
NPLOCNETSF1731R = max(0,NPLOCNETTSV1731R + NPLOCNETTSC1731R + NPLOCNETTSP1731R-TOTDEFLOCNPPSR);
DNPLOCIMPU1731R = (max(0,min(TOTDEFLOCNP1731R,NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R)))
	     * (1-positif(ART1731BIS))
	     + TOTDEFLOCNP1731 * positif(ART1731BIS);
NPLOCNETFHDEFANTR = max(0,NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R);
DEFNPLOCF1731R = min(0,NPLOCNETTV1731R + NPLOCNETTC1731R + NPLOCNETTPAC1731R-(TOTDEFLOCNPBISR-LNPRODEF10));
DEFNONPLOC1731R = abs(DEFNPLOCF1731R) ;
regle 90030:
application : iliad , batch  ;
DEFLOC10 = (((1- positif(NPLOCNETF10))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10,0)-LNPRODEF9,LNPRODEF9))
             * positif_ou_nul(LNPRODEF9-max(NPLOCNETFHDEFANT-LNPRODEF10,0)))
                      * (1-positif(ART1731BIS)) 
                 + DEFLOC101731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF9 * positif(ART1731BIS) * (1-positif(DEFLOC101731)) 
                         ;
DEFLOC9 = (((1- positif(NPLOCNETF9))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9,0)-LNPRODEF8,LNPRODEF8))
             * positif_ou_nul(LNPRODEF8-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9,0)))
                      * (1-positif(ART1731BIS))
                 + DEFLOC91731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF8 * positif(ART1731BIS) * (1-positif(DEFLOC91731)) 
                         ;
DEFLOC8 = (((1- positif(NPLOCNETF8))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8,0)-LNPRODEF7,LNPRODEF7))
             * positif_ou_nul(LNPRODEF7-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8,0)))
                      * (1-positif(ART1731BIS))
                 + DEFLOC81731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF7 * positif(ART1731BIS) * (1-positif(DEFLOC81731)) 
                         ;
DEFLOC7 = (((1- positif(NPLOCNETF7))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7,0)-LNPRODEF6,LNPRODEF6))
             * positif_ou_nul(LNPRODEF6-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7,0)))
                      * (1-positif(ART1731BIS))
                 + DEFLOC71731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF6 * positif(ART1731BIS) * (1-positif(DEFLOC71731)) 
                         ;
DEFLOC6 = (((1- positif(NPLOCNETF6))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6,0)-LNPRODEF5,LNPRODEF5))
             * positif_ou_nul(LNPRODEF5-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6,0)))
                      * (1-positif(ART1731BIS))
                 + DEFLOC61731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF5 * positif(ART1731BIS) * (1-positif(DEFLOC61731)) 
                         ;
DEFLOC5 = (((1- positif(NPLOCNETF5))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6 -LNPRODEF5,0)-LNPRODEF4,LNPRODEF4))
             * positif_ou_nul(LNPRODEF4-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6-LNPRODEF5,0)))
                      * (1-positif(ART1731BIS))
                 + DEFLOC51731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF4 * positif(ART1731BIS) * (1-positif(DEFLOC51731)) 
                         ;
DEFLOC4 =(((1- positif(NPLOCNETF4))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6-LNPRODEF5-LNPRODEF4,0)-LNPRODEF3,LNPRODEF3))
             * positif_ou_nul(LNPRODEF3-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6-LNPRODEF5-LNPRODEF4,0)))
                      * (1-positif(ART1731BIS))
                 + DEFLOC41731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF3 * positif(ART1731BIS) * (1-positif(DEFLOC41731)) 
                         ;
DEFLOC3 =(((1- positif(NPLOCNETF3))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6-LNPRODEF5-LNPRODEF4-LNPRODEF3,0)-LNPRODEF2,LNPRODEF2))
             * positif_ou_nul(LNPRODEF2-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6-LNPRODEF5-LNPRODEF4-LNPRODEF3,0)))
                      * (1-positif(ART1731BIS))
                 + DEFLOC31731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF2 * positif(ART1731BIS) * (1-positif(DEFLOC31731)) 
                         ;
DEFLOC2 = (((1-positif(NPLOCNETF2))
             * abs(min(max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6-LNPRODEF5-LNPRODEF4-LNPRODEF3-LNPRODEF2,0)-LNPRODEF1,LNPRODEF1))
             * positif_ou_nul(LNPRODEF1-max(NPLOCNETFHDEFANT-LNPRODEF10-LNPRODEF9-LNPRODEF8-LNPRODEF7-LNPRODEF6-LNPRODEF5-LNPRODEF4-LNPRODEF3-LNPRODEF2,0)))
                      * (1-positif(ART1731BIS)) 
                 + DEFLOC21731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + LNPRODEF1 * positif(ART1731BIS) * (1-positif(DEFLOC21731)) 
                         ;
DEFNPLOCFAV = max(0,abs(DEFNPLOCF) - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8 - DEFLOC9 - DEFLOC10);
DEFNPLOCFAV1731R = max(0,abs(DEFNPLOCF1731R) - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8 - DEFLOC9 - DEFLOC10);
DEFLOC1 = ((positif(DEFNONPLOC) * DEFNPLOCFAV) * (1-positif(ART1731BIS)) 
                 + DEFLOC11731 * positif(ART1731BIS)) * (1-positif(FLAGRETARD08+FLAGDEFAUT11))
                 + (LOCDEFNPCGAV + LOCDEFNPV + LOCDEFNPCGAC + LOCDEFNPC +LOCDEFNPCGAPAC + LOCDEFNPPAC )
                      * positif(ART1731BIS) * (1-positif(DEFLOC101731)) 
                         ;
VAREDEFLOCNP = min(TOTDEFLOCNP, NPLOCNETTV+NPLOCNETTC+NPLOCNETTPAC);
